Terminals unused in grammar

    STRUCT
    TYPEDEF
    UNION
    HASH


State 341 conflicts: 1 shift/reduce


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | LITERAL
    3                   | constant
    4                   | PARANTHESIS_OPEN expression PARANTHESIS_CLOSE

    5 constant: CONSTANT_INT
    6         | CONSTANT_FLOAT
    7         | CONSTANT_CHAR

    8 postfix_expression: primary_expression
    9                   | postfix_expression SQ_BRACKET_OPEN expression SQ_BRACKET_CLOSE
   10                   | postfix_expression PARANTHESIS_OPEN PARANTHESIS_CLOSE
   11                   | postfix_expression PARANTHESIS_OPEN argument_expression_list PARANTHESIS_CLOSE
   12                   | postfix_expression PERIOD IDENTIFIER
   13                   | postfix_expression ARROW IDENTIFIER
   14                   | postfix_expression INCREMENT
   15                   | postfix_expression DECREMENT
   16                   | PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

   18 argument_expression_list: assignment_expression
   19                         | argument_expression_list COMMA assignment_expression

   20 unary_expression: postfix_expression
   21                 | INCREMENT unary_expression
   22                 | DECREMENT unary_expression
   23                 | unary_operator cast_expression
   24                 | SIZEOF unary_expression
   25                 | SIZEOF PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE

   26 unary_operator: AMPERSAND
   27               | ASTERISK
   28               | PLUS
   29               | MINUS
   30               | TILDE
   31               | EXCLAMATION

   32 cast_expression: unary_expression
   33                | PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE cast_expression

   34 multiplicative_expression: cast_expression
   35                          | multiplicative_expression ASTERISK cast_expression
   36                          | multiplicative_expression SLASH cast_expression
   37                          | multiplicative_expression PERCENT cast_expression

   38 additive_expression: multiplicative_expression
   39                    | additive_expression PLUS multiplicative_expression
   40                    | additive_expression MINUS multiplicative_expression

   41 shift_expression: additive_expression
   42                 | shift_expression LEFT_SHIFT additive_expression
   43                 | shift_expression RIGHT_SHIFT additive_expression

   44 relational_expression: shift_expression
   45                      | relational_expression LESS_THAN shift_expression
   46                      | relational_expression GREATER_THAN shift_expression
   47                      | relational_expression LESS_THAN_EQUAL shift_expression
   48                      | relational_expression GREATER_THAN_EQUAL shift_expression

   49 equality_expression: relational_expression
   50                    | equality_expression EQUAL relational_expression
   51                    | equality_expression NOT_EQUAL relational_expression

   52 AND_expression: equality_expression
   53               | AND_expression AMPERSAND equality_expression

   54 exclusive_OR_expression: AND_expression
   55                        | exclusive_OR_expression CARET AND_expression

   56 inclusive_OR_expression: exclusive_OR_expression
   57                        | inclusive_OR_expression PIPE exclusive_OR_expression

   58 logical_AND_expression: inclusive_OR_expression
   59                       | logical_AND_expression LOGICAL_AND M inclusive_OR_expression

   60 logical_OR_expression: logical_AND_expression
   61                      | logical_OR_expression LOGICAL_OR M logical_AND_expression

   62 conditional_expression: logical_OR_expression
   63                       | logical_OR_expression N QUESTION M expression N COLON M conditional_expression

   64 M: ε

   65 N: ε

   66 assignment_expression: conditional_expression
   67                      | unary_expression assignment_operator assignment_expression

   68 assignment_operator: ASSIGN_t
   69                    | MULTIPLY_ASSIGN
   70                    | DIVIDE_ASSIGN
   71                    | MOD_ASSIGN
   72                    | PLUS_ASSIGN
   73                    | MINUS_ASSIGN
   74                    | LEFT_SHIFT_ASSIGN
   75                    | RIGHT_SHIFT_ASSIGN
   76                    | AND_ASSIGN
   77                    | XOR_ASSIGN
   78                    | OR_ASSIGN

   79 expression: assignment_expression
   80           | expression COMMA assignment_expression

   81 constant_expression: conditional_expression

   82 declaration: declaration_specifiers init_declarator_list SEMICOLON
   83            | declaration_specifiers SEMICOLON

   84 declaration_specifiers: storage_class_specifier declaration_specifiers
   85                       | storage_class_specifier
   86                       | type_specifier declaration_specifiers
   87                       | type_specifier
   88                       | type_qualifier declaration_specifiers
   89                       | type_qualifier
   90                       | function_specifier declaration_specifiers
   91                       | function_specifier

   92 init_declarator_list: init_declarator_list COMMA init_declarator
   93                     | init_declarator

   94 init_declarator: declarator
   95                | declarator ASSIGN_t initializer

   96 storage_class_specifier: EXTERN
   97                        | STATIC
   98                        | AUTO
   99                        | REGISTER

  100 type_specifier: VOID_t
  101               | CHAR_t
  102               | SHORT
  103               | INT_t
  104               | LONG
  105               | FLOAT_t
  106               | DOUBLE
  107               | SIGNED
  108               | UNSIGNED
  109               | BOOL_t
  110               | COMPLEX
  111               | IMAGINARY
  112               | enum_specifier

  113 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt
  114                         | type_qualifier specifier_qualifier_list_opt

  115 specifier_qualifier_list_opt: specifier_qualifier_list
  116                             | ε

  117 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list CURLY_BRACKET_CLOSE
  118               | ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list COMMA CURLY_BRACKET_CLOSE
  119               | ENUM IDENTIFIER

  120 identifier_opt: IDENTIFIER
  121               | ε

  122 enumerator_list: enumerator
  123                | enumerator_list COMMA enumerator

  124 enumerator: IDENTIFIER
  125           | IDENTIFIER ASSIGN_t constant_expression

  126 type_qualifier: CONST
  127               | RESTRICT
  128               | VOLATILE

  129 function_specifier: INLINE

  130 declarator: pointer direct_declarator
  131           | direct_declarator

  132 direct_declarator: IDENTIFIER
  133                  | PARANTHESIS_OPEN declarator PARANTHESIS_CLOSE
  134                  | direct_declarator SQ_BRACKET_OPEN type_qualifier_list_opt SQ_BRACKET_CLOSE
  135                  | direct_declarator SQ_BRACKET_OPEN type_qualifier_list_opt assignment_expression SQ_BRACKET_CLOSE
  136                  | direct_declarator SQ_BRACKET_OPEN STATIC type_qualifier_list assignment_expression SQ_BRACKET_CLOSE
  137                  | direct_declarator SQ_BRACKET_OPEN type_qualifier_list STATIC assignment_expression SQ_BRACKET_CLOSE
  138                  | direct_declarator SQ_BRACKET_OPEN type_qualifier_list_opt ASTERISK SQ_BRACKET_CLOSE
  139                  | direct_declarator PARANTHESIS_OPEN parameter_type_list_opt PARANTHESIS_CLOSE
  140                  | direct_declarator PARANTHESIS_OPEN identifier_list PARANTHESIS_CLOSE

  141 parameter_type_list_opt: parameter_type_list
  142                        | ε

  143 type_qualifier_list_opt: type_qualifier_list
  144                        | ε

  145 pointer: ASTERISK type_qualifier_list
  146        | ASTERISK
  147        | ASTERISK type_qualifier_list pointer
  148        | ASTERISK pointer

  149 type_qualifier_list: type_qualifier
  150                    | type_qualifier_list type_qualifier

  151 parameter_type_list: parameter_list
  152                    | parameter_list COMMA ELLIPSIS

  153 parameter_list: parameter_declaration
  154               | parameter_list COMMA parameter_declaration

  155 parameter_declaration: declaration_specifiers declarator
  156                      | declaration_specifiers

  157 identifier_list: IDENTIFIER
  158                | identifier_list COMMA IDENTIFIER

  159 type_name: specifier_qualifier_list

  160 initializer: assignment_expression
  161            | CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
  162            | CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

  163 initializer_list: designation_opt initializer
  164                 | initializer_list COMMA designation_opt initializer

  165 designation_opt: designation
  166                | ε

  167 designation: designator_list ASSIGN_t

  168 designator_list: designator
  169                | designator_list designator

  170 designator: SQ_BRACKET_OPEN constant_expression SQ_BRACKET_CLOSE
  171           | PERIOD IDENTIFIER

  172 statement: labeled_statement
  173          | compound_statement
  174          | expression_statement
  175          | selection_statement
  176          | iteration_statement
  177          | jump_statement

  178 labeled_statement: IDENTIFIER COLON statement
  179                  | CASE constant_expression COLON statement
  180                  | DEFAULT COLON statement

  181 compound_statement: CURLY_BRACKET_OPEN block_item_list CURLY_BRACKET_CLOSE
  182                   | CURLY_BRACKET_OPEN CURLY_BRACKET_CLOSE

  183 block_item_list: block_item
  184                | block_item_list M block_item

  185 block_item: declaration
  186           | statement

  187 expression_statement: expression SEMICOLON
  188                     | SEMICOLON

  189 selection_statement: IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement N
  190                    | IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement N ELSE M statement N
  191                    | SWITCH PARANTHESIS_OPEN expression PARANTHESIS_CLOSE statement

  192 iteration_statement: WHILE M PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement
  193                    | DO M statement M WHILE PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE SEMICOLON
  194                    | FOR PARANTHESIS_OPEN expression_statement M expression_statement N M expression N PARANTHESIS_CLOSE M statement

  195 jump_statement: GOTO_t IDENTIFIER SEMICOLON
  196               | CONTINUE SEMICOLON
  197               | BREAK SEMICOLON
  198               | RETURN_t SEMICOLON
  199               | RETURN_t expression SEMICOLON

  200 translation_unit: external_declaration
  201                 | translation_unit external_declaration

  202 external_declaration: function_definition
  203                     | declaration

  204 function_definition: declaration_specifiers declarator declaration_list compound_statement
  205                    | function_prototype compound_statement

  206 function_prototype: declaration_specifiers declarator

  207 declaration_list: declaration
  208                 | declaration_list declaration


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    AUTO (258) 98
    ENUM (259) 117 118 119
    RESTRICT (260) 127
    UNSIGNED (261) 108
    BREAK (262) 197
    EXTERN (263) 96
    VOID_t (264) 100
    CASE (265) 179
    FLOAT_t (266) 105
    SHORT (267) 102
    VOLATILE (268) 128
    CHAR_t (269) 101
    FOR (270) 194
    SIGNED (271) 107
    WHILE (272) 192 193
    CONST (273) 126
    GOTO_t (274) 195
    SIZEOF (275) 24 25
    BOOL_t (276) 109
    CONTINUE (277) 196
    IF (278) 189 190
    STATIC (279) 97 136 137
    COMPLEX (280) 110
    RETURN_t (281) 198 199
    DEFAULT (282) 180
    INLINE (283) 129
    IMAGINARY (284) 111
    DO (285) 193
    INT_t (286) 103
    SWITCH (287) 191
    DOUBLE (288) 106
    LONG (289) 104
    ELSE (290) 190
    REGISTER (291) 99
    STRUCT (292)
    TYPEDEF (293)
    UNION (294)
    PARANTHESIS_OPEN (295) 4 10 11 16 17 25 33 133 139 140 189 190 191 192 193 194
    PARANTHESIS_CLOSE (296) 4 10 11 16 17 25 33 133 139 140 189 190 191 192 193 194
    SQ_BRACKET_OPEN (297) 9 134 135 136 137 138 170
    SQ_BRACKET_CLOSE (298) 9 134 135 136 137 138 170
    CURLY_BRACKET_OPEN (299) 16 17 117 118 161 162 181 182
    CURLY_BRACKET_CLOSE (300) 16 17 117 118 161 162 181 182
    PERIOD (301) 12 171
    ARROW (302) 13
    INCREMENT (303) 14 21
    DECREMENT (304) 15 22
    AMPERSAND (305) 26 53
    ASTERISK (306) 27 35 138 145 146 147 148
    PLUS (307) 28 39
    MINUS (308) 29 40
    TILDE (309) 30
    EXCLAMATION (310) 31
    SLASH (311) 36
    PERCENT (312) 37
    LEFT_SHIFT (313) 42
    RIGHT_SHIFT (314) 43
    LESS_THAN (315) 45
    GREATER_THAN (316) 46
    LESS_THAN_EQUAL (317) 47
    GREATER_THAN_EQUAL (318) 48
    EQUAL (319) 50
    NOT_EQUAL (320) 51
    CARET (321) 55
    PIPE (322) 57
    LOGICAL_AND (323) 59
    LOGICAL_OR (324) 61
    QUESTION (325) 63
    COLON (326) 63 178 179 180
    SEMICOLON (327) 82 83 187 188 193 195 196 197 198 199
    ELLIPSIS (328) 152
    ASSIGN_t (329) 68 95 125 167
    MULTIPLY_ASSIGN (330) 69
    DIVIDE_ASSIGN (331) 70
    MOD_ASSIGN (332) 71
    PLUS_ASSIGN (333) 72
    MINUS_ASSIGN (334) 73
    LEFT_SHIFT_ASSIGN (335) 74
    RIGHT_SHIFT_ASSIGN (336) 75
    AND_ASSIGN (337) 76
    XOR_ASSIGN (338) 77
    OR_ASSIGN (339) 78
    COMMA (340) 17 19 80 92 118 123 152 154 158 162 164
    HASH (341)
    IDENTIFIER <sValue> (342) 1 12 13 119 120 124 125 132 157 158 171 178 195
    CONSTANT_INT <iValue> (343) 5
    CONSTANT_FLOAT <fValue> (344) 6
    CONSTANT_CHAR <cValue> (345) 7
    LITERAL <sValue> (346) 2


Nonterminals, with rules where they appear

    $accept (92)
        on left: 0
    primary_expression <expr> (93)
        on left: 1 2 3 4
        on right: 8
    constant <expr> (94)
        on left: 5 6 7
        on right: 3
    postfix_expression <expr> (95)
        on left: 8 9 10 11 12 13 14 15 16 17
        on right: 9 10 11 12 13 14 15 20
    argument_expression_list <paramList> (96)
        on left: 18 19
        on right: 11 19
    unary_expression <expr> (97)
        on left: 20 21 22 23 24 25
        on right: 21 22 24 32 67
    unary_operator <cValue> (98)
        on left: 26 27 28 29 30 31
        on right: 23
    cast_expression <expr> (99)
        on left: 32 33
        on right: 23 33 34 35 36 37
    multiplicative_expression <expr> (100)
        on left: 34 35 36 37
        on right: 35 36 37 38 39 40
    additive_expression <expr> (101)
        on left: 38 39 40
        on right: 39 40 41 42 43
    shift_expression <expr> (102)
        on left: 41 42 43
        on right: 42 43 44 45 46 47 48
    relational_expression <expr> (103)
        on left: 44 45 46 47 48
        on right: 45 46 47 48 49 50 51
    equality_expression <expr> (104)
        on left: 49 50 51
        on right: 50 51 52 53
    AND_expression <expr> (105)
        on left: 52 53
        on right: 53 54 55
    exclusive_OR_expression <expr> (106)
        on left: 54 55
        on right: 55 56 57
    inclusive_OR_expression <expr> (107)
        on left: 56 57
        on right: 57 58 59
    logical_AND_expression <expr> (108)
        on left: 58 59
        on right: 59 60 61
    logical_OR_expression <expr> (109)
        on left: 60 61
        on right: 61 62 63
    conditional_expression <expr> (110)
        on left: 62 63
        on right: 63 66 81
    M <expr> (111)
        on left: 64
        on right: 59 61 63 184 189 190 192 193 194
    N <expr> (112)
        on left: 65
        on right: 63 189 190 192 193 194
    assignment_expression <expr> (113)
        on left: 66 67
        on right: 18 19 67 79 80 135 136 137 160
    assignment_operator (114)
        on left: 68 69 70 71 72 73 74 75 76 77 78
        on right: 67
    expression <expr> (115)
        on left: 79 80
        on right: 4 9 63 80 187 189 190 191 192 193 194 199
    constant_expression (116)
        on left: 81
        on right: 125 170 179
    declaration (117)
        on left: 82 83
        on right: 185 203 207 208
    declaration_specifiers <types> (118)
        on left: 84 85 86 87 88 89 90 91
        on right: 82 83 84 86 88 90 155 156 204 206
    init_declarator_list <declList> (119)
        on left: 92 93
        on right: 82 92
    init_declarator <decl> (120)
        on left: 94 95
        on right: 92 93
    storage_class_specifier (121)
        on left: 96 97 98 99
        on right: 84 85
    type_specifier <types> (122)
        on left: 100 101 102 103 104 105 106 107 108 109 110 111 112
        on right: 86 87 113
    specifier_qualifier_list (123)
        on left: 113 114
        on right: 115 159
    specifier_qualifier_list_opt (124)
        on left: 115 116
        on right: 113 114
    enum_specifier (125)
        on left: 117 118 119
        on right: 112
    identifier_opt (126)
        on left: 120 121
        on right: 117 118
    enumerator_list (127)
        on left: 122 123
        on right: 117 118 123
    enumerator (128)
        on left: 124 125
        on right: 122 123
    type_qualifier (129)
        on left: 126 127 128
        on right: 88 89 114 149 150
    function_specifier (130)
        on left: 129
        on right: 90 91
    declarator <decl> (131)
        on left: 130 131
        on right: 94 95 133 155 204 206
    direct_declarator <decl> (132)
        on left: 132 133 134 135 136 137 138 139 140
        on right: 130 131 134 135 136 137 138 139 140
    parameter_type_list_opt <paramList> (133)
        on left: 141 142
        on right: 139
    type_qualifier_list_opt (134)
        on left: 143 144
        on right: 134 135 138
    pointer <iValue> (135)
        on left: 145 146 147 148
        on right: 130 147 148
    type_qualifier_list (136)
        on left: 149 150
        on right: 136 137 143 145 147 150
    parameter_type_list <paramList> (137)
        on left: 151 152
        on right: 141
    parameter_list <paramList> (138)
        on left: 153 154
        on right: 151 152 154
    parameter_declaration <param> (139)
        on left: 155 156
        on right: 153 154
    identifier_list (140)
        on left: 157 158
        on right: 140 158
    type_name (141)
        on left: 159
        on right: 16 17 25 33
    initializer <expr> (142)
        on left: 160 161 162
        on right: 95 163 164
    initializer_list <decl> (143)
        on left: 163 164
        on right: 16 17 161 162 164
    designation_opt (144)
        on left: 165 166
        on right: 163 164
    designation (145)
        on left: 167
        on right: 165
    designator_list (146)
        on left: 168 169
        on right: 167 169
    designator (147)
        on left: 170 171
        on right: 168 169
    statement <expr> (148)
        on left: 172 173 174 175 176 177
        on right: 178 179 180 186 189 190 191 192 193 194
    labeled_statement <expr> (149)
        on left: 178 179 180
        on right: 172
    compound_statement <expr> (150)
        on left: 181 182
        on right: 173 204 205
    block_item_list <expr> (151)
        on left: 183 184
        on right: 181 184
    block_item <expr> (152)
        on left: 185 186
        on right: 183 184
    expression_statement <expr> (153)
        on left: 187 188
        on right: 174 194
    selection_statement <expr> (154)
        on left: 189 190 191
        on right: 175
    iteration_statement <expr> (155)
        on left: 192 193 194
        on right: 176
    jump_statement <expr> (156)
        on left: 195 196 197 198 199
        on right: 177
    translation_unit (157)
        on left: 200 201
        on right: 0 201
    external_declaration (158)
        on left: 202 203
        on right: 200 201
    function_definition (159)
        on left: 204 205
        on right: 202
    function_prototype <decl> (160)
        on left: 206
        on right: 205
    declaration_list (161)
        on left: 207 208
        on right: 204 208


State 0

    0 $accept: • translation_unit $end

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID_t     shift, and go to state 6
    FLOAT_t    shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR_t     shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL_t     shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT_t      shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    translation_unit         go to state 29
    external_declaration     go to state 30
    function_definition      go to state 31
    function_prototype       go to state 32


State 1

   98 storage_class_specifier: AUTO •

    $default  reduce using rule 98 (storage_class_specifier)


State 2

  117 enum_specifier: ENUM • identifier_opt CURLY_BRACKET_OPEN enumerator_list CURLY_BRACKET_CLOSE
  118               | ENUM • identifier_opt CURLY_BRACKET_OPEN enumerator_list COMMA CURLY_BRACKET_CLOSE
  119               | ENUM • IDENTIFIER

    IDENTIFIER  shift, and go to state 33

    $default  reduce using rule 121 (identifier_opt)

    identifier_opt  go to state 34


State 3

  127 type_qualifier: RESTRICT •

    $default  reduce using rule 127 (type_qualifier)


State 4

  108 type_specifier: UNSIGNED •

    $default  reduce using rule 108 (type_specifier)


State 5

   96 storage_class_specifier: EXTERN •

    $default  reduce using rule 96 (storage_class_specifier)


State 6

  100 type_specifier: VOID_t •

    $default  reduce using rule 100 (type_specifier)


State 7

  105 type_specifier: FLOAT_t •

    $default  reduce using rule 105 (type_specifier)


State 8

  102 type_specifier: SHORT •

    $default  reduce using rule 102 (type_specifier)


State 9

  128 type_qualifier: VOLATILE •

    $default  reduce using rule 128 (type_qualifier)


State 10

  101 type_specifier: CHAR_t •

    $default  reduce using rule 101 (type_specifier)


State 11

  107 type_specifier: SIGNED •

    $default  reduce using rule 107 (type_specifier)


State 12

  126 type_qualifier: CONST •

    $default  reduce using rule 126 (type_qualifier)


State 13

  109 type_specifier: BOOL_t •

    $default  reduce using rule 109 (type_specifier)


State 14

   97 storage_class_specifier: STATIC •

    $default  reduce using rule 97 (storage_class_specifier)


State 15

  110 type_specifier: COMPLEX •

    $default  reduce using rule 110 (type_specifier)


State 16

  129 function_specifier: INLINE •

    $default  reduce using rule 129 (function_specifier)


State 17

  111 type_specifier: IMAGINARY •

    $default  reduce using rule 111 (type_specifier)


State 18

  103 type_specifier: INT_t •

    $default  reduce using rule 103 (type_specifier)


State 19

  106 type_specifier: DOUBLE •

    $default  reduce using rule 106 (type_specifier)


State 20

  104 type_specifier: LONG •

    $default  reduce using rule 104 (type_specifier)


State 21

   99 storage_class_specifier: REGISTER •

    $default  reduce using rule 99 (storage_class_specifier)


State 22

  203 external_declaration: declaration •

    $default  reduce using rule 203 (external_declaration)


State 23

   82 declaration: declaration_specifiers • init_declarator_list SEMICOLON
   83            | declaration_specifiers • SEMICOLON
  204 function_definition: declaration_specifiers • declarator declaration_list compound_statement
  206 function_prototype: declaration_specifiers • declarator

    PARANTHESIS_OPEN  shift, and go to state 35
    ASTERISK          shift, and go to state 36
    SEMICOLON         shift, and go to state 37
    IDENTIFIER        shift, and go to state 38

    init_declarator_list  go to state 39
    init_declarator       go to state 40
    declarator            go to state 41
    direct_declarator     go to state 42
    pointer               go to state 43


State 24

   84 declaration_specifiers: storage_class_specifier • declaration_specifiers
   85                       | storage_class_specifier •

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID_t     shift, and go to state 6
    FLOAT_t    shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR_t     shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL_t     shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT_t      shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 85 (declaration_specifiers)

    declaration_specifiers   go to state 44
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28


State 25

   86 declaration_specifiers: type_specifier • declaration_specifiers
   87                       | type_specifier •

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID_t     shift, and go to state 6
    FLOAT_t    shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR_t     shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL_t     shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT_t      shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 87 (declaration_specifiers)

    declaration_specifiers   go to state 45
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28


State 26

  112 type_specifier: enum_specifier •

    $default  reduce using rule 112 (type_specifier)


State 27

   88 declaration_specifiers: type_qualifier • declaration_specifiers
   89                       | type_qualifier •

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID_t     shift, and go to state 6
    FLOAT_t    shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR_t     shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL_t     shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT_t      shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 89 (declaration_specifiers)

    declaration_specifiers   go to state 46
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28


State 28

   90 declaration_specifiers: function_specifier • declaration_specifiers
   91                       | function_specifier •

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID_t     shift, and go to state 6
    FLOAT_t    shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR_t     shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL_t     shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT_t      shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    $default  reduce using rule 91 (declaration_specifiers)

    declaration_specifiers   go to state 47
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28


State 29

    0 $accept: translation_unit • $end
  201 translation_unit: translation_unit • external_declaration

    $end       shift, and go to state 48
    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID_t     shift, and go to state 6
    FLOAT_t    shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR_t     shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL_t     shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT_t      shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21

    declaration              go to state 22
    declaration_specifiers   go to state 23
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    external_declaration     go to state 49
    function_definition      go to state 31
    function_prototype       go to state 32


State 30

  200 translation_unit: external_declaration •

    $default  reduce using rule 200 (translation_unit)


State 31

  202 external_declaration: function_definition •

    $default  reduce using rule 202 (external_declaration)


State 32

  205 function_definition: function_prototype • compound_statement

    CURLY_BRACKET_OPEN  shift, and go to state 50

    compound_statement  go to state 51


State 33

  119 enum_specifier: ENUM IDENTIFIER •
  120 identifier_opt: IDENTIFIER •

    CURLY_BRACKET_OPEN  reduce using rule 120 (identifier_opt)
    $default            reduce using rule 119 (enum_specifier)


State 34

  117 enum_specifier: ENUM identifier_opt • CURLY_BRACKET_OPEN enumerator_list CURLY_BRACKET_CLOSE
  118               | ENUM identifier_opt • CURLY_BRACKET_OPEN enumerator_list COMMA CURLY_BRACKET_CLOSE

    CURLY_BRACKET_OPEN  shift, and go to state 52


State 35

  133 direct_declarator: PARANTHESIS_OPEN • declarator PARANTHESIS_CLOSE

    PARANTHESIS_OPEN  shift, and go to state 35
    ASTERISK          shift, and go to state 36
    IDENTIFIER        shift, and go to state 38

    declarator         go to state 53
    direct_declarator  go to state 42
    pointer            go to state 43


State 36

  145 pointer: ASTERISK • type_qualifier_list
  146        | ASTERISK •
  147        | ASTERISK • type_qualifier_list pointer
  148        | ASTERISK • pointer

    RESTRICT  shift, and go to state 3
    VOLATILE  shift, and go to state 9
    CONST     shift, and go to state 12
    ASTERISK  shift, and go to state 36

    $default  reduce using rule 146 (pointer)

    type_qualifier       go to state 54
    pointer              go to state 55
    type_qualifier_list  go to state 56


State 37

   83 declaration: declaration_specifiers SEMICOLON •

    $default  reduce using rule 83 (declaration)


State 38

  132 direct_declarator: IDENTIFIER •

    $default  reduce using rule 132 (direct_declarator)


State 39

   82 declaration: declaration_specifiers init_declarator_list • SEMICOLON
   92 init_declarator_list: init_declarator_list • COMMA init_declarator

    SEMICOLON  shift, and go to state 57
    COMMA      shift, and go to state 58


State 40

   93 init_declarator_list: init_declarator •

    $default  reduce using rule 93 (init_declarator_list)


State 41

   94 init_declarator: declarator •
   95                | declarator • ASSIGN_t initializer
  204 function_definition: declaration_specifiers declarator • declaration_list compound_statement
  206 function_prototype: declaration_specifiers declarator •

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID_t     shift, and go to state 6
    FLOAT_t    shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR_t     shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL_t     shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT_t      shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21
    ASSIGN_t   shift, and go to state 59

    CURLY_BRACKET_OPEN  reduce using rule 206 (function_prototype)
    $default            reduce using rule 94 (init_declarator)

    declaration              go to state 60
    declaration_specifiers   go to state 61
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    declaration_list         go to state 62


State 42

  131 declarator: direct_declarator •
  134 direct_declarator: direct_declarator • SQ_BRACKET_OPEN type_qualifier_list_opt SQ_BRACKET_CLOSE
  135                  | direct_declarator • SQ_BRACKET_OPEN type_qualifier_list_opt assignment_expression SQ_BRACKET_CLOSE
  136                  | direct_declarator • SQ_BRACKET_OPEN STATIC type_qualifier_list assignment_expression SQ_BRACKET_CLOSE
  137                  | direct_declarator • SQ_BRACKET_OPEN type_qualifier_list STATIC assignment_expression SQ_BRACKET_CLOSE
  138                  | direct_declarator • SQ_BRACKET_OPEN type_qualifier_list_opt ASTERISK SQ_BRACKET_CLOSE
  139                  | direct_declarator • PARANTHESIS_OPEN parameter_type_list_opt PARANTHESIS_CLOSE
  140                  | direct_declarator • PARANTHESIS_OPEN identifier_list PARANTHESIS_CLOSE

    PARANTHESIS_OPEN  shift, and go to state 63
    SQ_BRACKET_OPEN   shift, and go to state 64

    $default  reduce using rule 131 (declarator)


State 43

  130 declarator: pointer • direct_declarator

    PARANTHESIS_OPEN  shift, and go to state 35
    IDENTIFIER        shift, and go to state 38

    direct_declarator  go to state 65


State 44

   84 declaration_specifiers: storage_class_specifier declaration_specifiers •

    $default  reduce using rule 84 (declaration_specifiers)


State 45

   86 declaration_specifiers: type_specifier declaration_specifiers •

    $default  reduce using rule 86 (declaration_specifiers)


State 46

   88 declaration_specifiers: type_qualifier declaration_specifiers •

    $default  reduce using rule 88 (declaration_specifiers)


State 47

   90 declaration_specifiers: function_specifier declaration_specifiers •

    $default  reduce using rule 90 (declaration_specifiers)


State 48

    0 $accept: translation_unit $end •

    $default  accept


State 49

  201 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 201 (translation_unit)


State 50

  181 compound_statement: CURLY_BRACKET_OPEN • block_item_list CURLY_BRACKET_CLOSE
  182                   | CURLY_BRACKET_OPEN • CURLY_BRACKET_CLOSE

    AUTO                 shift, and go to state 1
    ENUM                 shift, and go to state 2
    RESTRICT             shift, and go to state 3
    UNSIGNED             shift, and go to state 4
    BREAK                shift, and go to state 66
    EXTERN               shift, and go to state 5
    VOID_t               shift, and go to state 6
    CASE                 shift, and go to state 67
    FLOAT_t              shift, and go to state 7
    SHORT                shift, and go to state 8
    VOLATILE             shift, and go to state 9
    CHAR_t               shift, and go to state 10
    FOR                  shift, and go to state 68
    SIGNED               shift, and go to state 11
    WHILE                shift, and go to state 69
    CONST                shift, and go to state 12
    GOTO_t               shift, and go to state 70
    SIZEOF               shift, and go to state 71
    BOOL_t               shift, and go to state 13
    CONTINUE             shift, and go to state 72
    IF                   shift, and go to state 73
    STATIC               shift, and go to state 14
    COMPLEX              shift, and go to state 15
    RETURN_t             shift, and go to state 74
    DEFAULT              shift, and go to state 75
    INLINE               shift, and go to state 16
    IMAGINARY            shift, and go to state 17
    DO                   shift, and go to state 76
    INT_t                shift, and go to state 18
    SWITCH               shift, and go to state 77
    DOUBLE               shift, and go to state 19
    LONG                 shift, and go to state 20
    REGISTER             shift, and go to state 21
    PARANTHESIS_OPEN     shift, and go to state 78
    CURLY_BRACKET_OPEN   shift, and go to state 50
    CURLY_BRACKET_CLOSE  shift, and go to state 79
    INCREMENT            shift, and go to state 80
    DECREMENT            shift, and go to state 81
    AMPERSAND            shift, and go to state 82
    ASTERISK             shift, and go to state 83
    PLUS                 shift, and go to state 84
    MINUS                shift, and go to state 85
    TILDE                shift, and go to state 86
    EXCLAMATION          shift, and go to state 87
    SEMICOLON            shift, and go to state 88
    IDENTIFIER           shift, and go to state 89
    CONSTANT_INT         shift, and go to state 90
    CONSTANT_FLOAT       shift, and go to state 91
    CONSTANT_CHAR        shift, and go to state 92
    LITERAL              shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    declaration                go to state 113
    declaration_specifiers     go to state 61
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 114
    labeled_statement          go to state 115
    compound_statement         go to state 116
    block_item_list            go to state 117
    block_item                 go to state 118
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 51

  205 function_definition: function_prototype compound_statement •

    $default  reduce using rule 205 (function_definition)


State 52

  117 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN • enumerator_list CURLY_BRACKET_CLOSE
  118               | ENUM identifier_opt CURLY_BRACKET_OPEN • enumerator_list COMMA CURLY_BRACKET_CLOSE

    IDENTIFIER  shift, and go to state 123

    enumerator_list  go to state 124
    enumerator       go to state 125


State 53

  133 direct_declarator: PARANTHESIS_OPEN declarator • PARANTHESIS_CLOSE

    PARANTHESIS_CLOSE  shift, and go to state 126


State 54

  149 type_qualifier_list: type_qualifier •

    $default  reduce using rule 149 (type_qualifier_list)


State 55

  148 pointer: ASTERISK pointer •

    $default  reduce using rule 148 (pointer)


State 56

  145 pointer: ASTERISK type_qualifier_list •
  147        | ASTERISK type_qualifier_list • pointer
  150 type_qualifier_list: type_qualifier_list • type_qualifier

    RESTRICT  shift, and go to state 3
    VOLATILE  shift, and go to state 9
    CONST     shift, and go to state 12
    ASTERISK  shift, and go to state 36

    $default  reduce using rule 145 (pointer)

    type_qualifier  go to state 127
    pointer         go to state 128


State 57

   82 declaration: declaration_specifiers init_declarator_list SEMICOLON •

    $default  reduce using rule 82 (declaration)


State 58

   92 init_declarator_list: init_declarator_list COMMA • init_declarator

    PARANTHESIS_OPEN  shift, and go to state 35
    ASTERISK          shift, and go to state 36
    IDENTIFIER        shift, and go to state 38

    init_declarator    go to state 129
    declarator         go to state 130
    direct_declarator  go to state 42
    pointer            go to state 43


State 59

   95 init_declarator: declarator ASSIGN_t • initializer

    SIZEOF              shift, and go to state 71
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 131
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    IDENTIFIER          shift, and go to state 132
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 133
    initializer                go to state 134


State 60

  207 declaration_list: declaration •

    $default  reduce using rule 207 (declaration_list)


State 61

   82 declaration: declaration_specifiers • init_declarator_list SEMICOLON
   83            | declaration_specifiers • SEMICOLON

    PARANTHESIS_OPEN  shift, and go to state 35
    ASTERISK          shift, and go to state 36
    SEMICOLON         shift, and go to state 37
    IDENTIFIER        shift, and go to state 38

    init_declarator_list  go to state 39
    init_declarator       go to state 40
    declarator            go to state 130
    direct_declarator     go to state 42
    pointer               go to state 43


State 62

  204 function_definition: declaration_specifiers declarator declaration_list • compound_statement
  208 declaration_list: declaration_list • declaration

    AUTO                shift, and go to state 1
    ENUM                shift, and go to state 2
    RESTRICT            shift, and go to state 3
    UNSIGNED            shift, and go to state 4
    EXTERN              shift, and go to state 5
    VOID_t              shift, and go to state 6
    FLOAT_t             shift, and go to state 7
    SHORT               shift, and go to state 8
    VOLATILE            shift, and go to state 9
    CHAR_t              shift, and go to state 10
    SIGNED              shift, and go to state 11
    CONST               shift, and go to state 12
    BOOL_t              shift, and go to state 13
    STATIC              shift, and go to state 14
    COMPLEX             shift, and go to state 15
    INLINE              shift, and go to state 16
    IMAGINARY           shift, and go to state 17
    INT_t               shift, and go to state 18
    DOUBLE              shift, and go to state 19
    LONG                shift, and go to state 20
    REGISTER            shift, and go to state 21
    CURLY_BRACKET_OPEN  shift, and go to state 50

    declaration              go to state 135
    declaration_specifiers   go to state 61
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    compound_statement       go to state 136


State 63

  139 direct_declarator: direct_declarator PARANTHESIS_OPEN • parameter_type_list_opt PARANTHESIS_CLOSE
  140                  | direct_declarator PARANTHESIS_OPEN • identifier_list PARANTHESIS_CLOSE

    AUTO        shift, and go to state 1
    ENUM        shift, and go to state 2
    RESTRICT    shift, and go to state 3
    UNSIGNED    shift, and go to state 4
    EXTERN      shift, and go to state 5
    VOID_t      shift, and go to state 6
    FLOAT_t     shift, and go to state 7
    SHORT       shift, and go to state 8
    VOLATILE    shift, and go to state 9
    CHAR_t      shift, and go to state 10
    SIGNED      shift, and go to state 11
    CONST       shift, and go to state 12
    BOOL_t      shift, and go to state 13
    STATIC      shift, and go to state 14
    COMPLEX     shift, and go to state 15
    INLINE      shift, and go to state 16
    IMAGINARY   shift, and go to state 17
    INT_t       shift, and go to state 18
    DOUBLE      shift, and go to state 19
    LONG        shift, and go to state 20
    REGISTER    shift, and go to state 21
    IDENTIFIER  shift, and go to state 137

    $default  reduce using rule 142 (parameter_type_list_opt)

    declaration_specifiers   go to state 138
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_type_list_opt  go to state 139
    parameter_type_list      go to state 140
    parameter_list           go to state 141
    parameter_declaration    go to state 142
    identifier_list          go to state 143


State 64

  134 direct_declarator: direct_declarator SQ_BRACKET_OPEN • type_qualifier_list_opt SQ_BRACKET_CLOSE
  135                  | direct_declarator SQ_BRACKET_OPEN • type_qualifier_list_opt assignment_expression SQ_BRACKET_CLOSE
  136                  | direct_declarator SQ_BRACKET_OPEN • STATIC type_qualifier_list assignment_expression SQ_BRACKET_CLOSE
  137                  | direct_declarator SQ_BRACKET_OPEN • type_qualifier_list STATIC assignment_expression SQ_BRACKET_CLOSE
  138                  | direct_declarator SQ_BRACKET_OPEN • type_qualifier_list_opt ASTERISK SQ_BRACKET_CLOSE

    RESTRICT  shift, and go to state 3
    VOLATILE  shift, and go to state 9
    CONST     shift, and go to state 12
    STATIC    shift, and go to state 144

    $default  reduce using rule 144 (type_qualifier_list_opt)

    type_qualifier           go to state 54
    type_qualifier_list_opt  go to state 145
    type_qualifier_list      go to state 146


State 65

  130 declarator: pointer direct_declarator •
  134 direct_declarator: direct_declarator • SQ_BRACKET_OPEN type_qualifier_list_opt SQ_BRACKET_CLOSE
  135                  | direct_declarator • SQ_BRACKET_OPEN type_qualifier_list_opt assignment_expression SQ_BRACKET_CLOSE
  136                  | direct_declarator • SQ_BRACKET_OPEN STATIC type_qualifier_list assignment_expression SQ_BRACKET_CLOSE
  137                  | direct_declarator • SQ_BRACKET_OPEN type_qualifier_list STATIC assignment_expression SQ_BRACKET_CLOSE
  138                  | direct_declarator • SQ_BRACKET_OPEN type_qualifier_list_opt ASTERISK SQ_BRACKET_CLOSE
  139                  | direct_declarator • PARANTHESIS_OPEN parameter_type_list_opt PARANTHESIS_CLOSE
  140                  | direct_declarator • PARANTHESIS_OPEN identifier_list PARANTHESIS_CLOSE

    PARANTHESIS_OPEN  shift, and go to state 63
    SQ_BRACKET_OPEN   shift, and go to state 64

    $default  reduce using rule 130 (declarator)


State 66

  197 jump_statement: BREAK • SEMICOLON

    SEMICOLON  shift, and go to state 147


State 67

  179 labeled_statement: CASE • constant_expression COLON statement

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 149
    constant_expression        go to state 150


State 68

  194 iteration_statement: FOR • PARANTHESIS_OPEN expression_statement M expression_statement N M expression N PARANTHESIS_CLOSE M statement

    PARANTHESIS_OPEN  shift, and go to state 151


State 69

  192 iteration_statement: WHILE • M PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement

    $default  reduce using rule 64 (M)

    M  go to state 152


State 70

  195 jump_statement: GOTO_t • IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 153


State 71

   24 unary_expression: SIZEOF • unary_expression
   25                 | SIZEOF • PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 154
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression  go to state 94
    constant            go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 155
    unary_operator      go to state 98


State 72

  196 jump_statement: CONTINUE • SEMICOLON

    SEMICOLON  shift, and go to state 156


State 73

  189 selection_statement: IF • PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement N
  190                    | IF • PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement N ELSE M statement N

    PARANTHESIS_OPEN  shift, and go to state 157


State 74

  198 jump_statement: RETURN_t • SEMICOLON
  199               | RETURN_t • expression SEMICOLON

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    SEMICOLON         shift, and go to state 158
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 159


State 75

  180 labeled_statement: DEFAULT • COLON statement

    COLON  shift, and go to state 160


State 76

  193 iteration_statement: DO • M statement M WHILE PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE SEMICOLON

    $default  reduce using rule 64 (M)

    M  go to state 161


State 77

  191 selection_statement: SWITCH • PARANTHESIS_OPEN expression PARANTHESIS_CLOSE statement

    PARANTHESIS_OPEN  shift, and go to state 162


State 78

    4 primary_expression: PARANTHESIS_OPEN • expression PARANTHESIS_CLOSE
   16 postfix_expression: PARANTHESIS_OPEN • type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | PARANTHESIS_OPEN • type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   33 cast_expression: PARANTHESIS_OPEN • type_name PARANTHESIS_CLOSE cast_expression

    ENUM              shift, and go to state 2
    RESTRICT          shift, and go to state 3
    UNSIGNED          shift, and go to state 4
    VOID_t            shift, and go to state 6
    FLOAT_t           shift, and go to state 7
    SHORT             shift, and go to state 8
    VOLATILE          shift, and go to state 9
    CHAR_t            shift, and go to state 10
    SIGNED            shift, and go to state 11
    CONST             shift, and go to state 12
    SIZEOF            shift, and go to state 71
    BOOL_t            shift, and go to state 13
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 17
    INT_t             shift, and go to state 18
    DOUBLE            shift, and go to state 19
    LONG              shift, and go to state 20
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 163
    type_specifier             go to state 164
    specifier_qualifier_list   go to state 165
    enum_specifier             go to state 26
    type_qualifier             go to state 166
    type_name                  go to state 167


State 79

  182 compound_statement: CURLY_BRACKET_OPEN CURLY_BRACKET_CLOSE •

    $default  reduce using rule 182 (compound_statement)


State 80

   21 unary_expression: INCREMENT • unary_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 168
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression  go to state 94
    constant            go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 169
    unary_operator      go to state 98


State 81

   22 unary_expression: DECREMENT • unary_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 168
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression  go to state 94
    constant            go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 170
    unary_operator      go to state 98


State 82

   26 unary_operator: AMPERSAND •

    $default  reduce using rule 26 (unary_operator)


State 83

   27 unary_operator: ASTERISK •

    $default  reduce using rule 27 (unary_operator)


State 84

   28 unary_operator: PLUS •

    $default  reduce using rule 28 (unary_operator)


State 85

   29 unary_operator: MINUS •

    $default  reduce using rule 29 (unary_operator)


State 86

   30 unary_operator: TILDE •

    $default  reduce using rule 30 (unary_operator)


State 87

   31 unary_operator: EXCLAMATION •

    $default  reduce using rule 31 (unary_operator)


State 88

  188 expression_statement: SEMICOLON •

    $default  reduce using rule 188 (expression_statement)


State 89

    1 primary_expression: IDENTIFIER •
  178 labeled_statement: IDENTIFIER • COLON statement

    COLON  shift, and go to state 171

    $default  reduce using rule 1 (primary_expression)


State 90

    5 constant: CONSTANT_INT •

    $default  reduce using rule 5 (constant)


State 91

    6 constant: CONSTANT_FLOAT •

    $default  reduce using rule 6 (constant)


State 92

    7 constant: CONSTANT_CHAR •

    $default  reduce using rule 7 (constant)


State 93

    2 primary_expression: LITERAL •

    $default  reduce using rule 2 (primary_expression)


State 94

    8 postfix_expression: primary_expression •

    $default  reduce using rule 8 (postfix_expression)


State 95

    3 primary_expression: constant •

    $default  reduce using rule 3 (primary_expression)


State 96

    9 postfix_expression: postfix_expression • SQ_BRACKET_OPEN expression SQ_BRACKET_CLOSE
   10                   | postfix_expression • PARANTHESIS_OPEN PARANTHESIS_CLOSE
   11                   | postfix_expression • PARANTHESIS_OPEN argument_expression_list PARANTHESIS_CLOSE
   12                   | postfix_expression • PERIOD IDENTIFIER
   13                   | postfix_expression • ARROW IDENTIFIER
   14                   | postfix_expression • INCREMENT
   15                   | postfix_expression • DECREMENT
   20 unary_expression: postfix_expression •

    PARANTHESIS_OPEN  shift, and go to state 172
    SQ_BRACKET_OPEN   shift, and go to state 173
    PERIOD            shift, and go to state 174
    ARROW             shift, and go to state 175
    INCREMENT         shift, and go to state 176
    DECREMENT         shift, and go to state 177

    $default  reduce using rule 20 (unary_expression)


State 97

   32 cast_expression: unary_expression •
   67 assignment_expression: unary_expression • assignment_operator assignment_expression

    ASSIGN_t            shift, and go to state 178
    MULTIPLY_ASSIGN     shift, and go to state 179
    DIVIDE_ASSIGN       shift, and go to state 180
    MOD_ASSIGN          shift, and go to state 181
    PLUS_ASSIGN         shift, and go to state 182
    MINUS_ASSIGN        shift, and go to state 183
    LEFT_SHIFT_ASSIGN   shift, and go to state 184
    RIGHT_SHIFT_ASSIGN  shift, and go to state 185
    AND_ASSIGN          shift, and go to state 186
    XOR_ASSIGN          shift, and go to state 187
    OR_ASSIGN           shift, and go to state 188

    $default  reduce using rule 32 (cast_expression)

    assignment_operator  go to state 189


State 98

   23 unary_expression: unary_operator • cast_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression  go to state 94
    constant            go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 148
    unary_operator      go to state 98
    cast_expression     go to state 190


State 99

   34 multiplicative_expression: cast_expression •

    $default  reduce using rule 34 (multiplicative_expression)


State 100

   35 multiplicative_expression: multiplicative_expression • ASTERISK cast_expression
   36                          | multiplicative_expression • SLASH cast_expression
   37                          | multiplicative_expression • PERCENT cast_expression
   38 additive_expression: multiplicative_expression •

    ASTERISK  shift, and go to state 191
    SLASH     shift, and go to state 192
    PERCENT   shift, and go to state 193

    $default  reduce using rule 38 (additive_expression)


State 101

   39 additive_expression: additive_expression • PLUS multiplicative_expression
   40                    | additive_expression • MINUS multiplicative_expression
   41 shift_expression: additive_expression •

    PLUS   shift, and go to state 194
    MINUS  shift, and go to state 195

    $default  reduce using rule 41 (shift_expression)


State 102

   42 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   43                 | shift_expression • RIGHT_SHIFT additive_expression
   44 relational_expression: shift_expression •

    LEFT_SHIFT   shift, and go to state 196
    RIGHT_SHIFT  shift, and go to state 197

    $default  reduce using rule 44 (relational_expression)


State 103

   45 relational_expression: relational_expression • LESS_THAN shift_expression
   46                      | relational_expression • GREATER_THAN shift_expression
   47                      | relational_expression • LESS_THAN_EQUAL shift_expression
   48                      | relational_expression • GREATER_THAN_EQUAL shift_expression
   49 equality_expression: relational_expression •

    LESS_THAN           shift, and go to state 198
    GREATER_THAN        shift, and go to state 199
    LESS_THAN_EQUAL     shift, and go to state 200
    GREATER_THAN_EQUAL  shift, and go to state 201

    $default  reduce using rule 49 (equality_expression)


State 104

   50 equality_expression: equality_expression • EQUAL relational_expression
   51                    | equality_expression • NOT_EQUAL relational_expression
   52 AND_expression: equality_expression •

    EQUAL      shift, and go to state 202
    NOT_EQUAL  shift, and go to state 203

    $default  reduce using rule 52 (AND_expression)


State 105

   53 AND_expression: AND_expression • AMPERSAND equality_expression
   54 exclusive_OR_expression: AND_expression •

    AMPERSAND  shift, and go to state 204

    $default  reduce using rule 54 (exclusive_OR_expression)


State 106

   55 exclusive_OR_expression: exclusive_OR_expression • CARET AND_expression
   56 inclusive_OR_expression: exclusive_OR_expression •

    CARET  shift, and go to state 205

    $default  reduce using rule 56 (inclusive_OR_expression)


State 107

   57 inclusive_OR_expression: inclusive_OR_expression • PIPE exclusive_OR_expression
   58 logical_AND_expression: inclusive_OR_expression •

    PIPE  shift, and go to state 206

    $default  reduce using rule 58 (logical_AND_expression)


State 108

   59 logical_AND_expression: logical_AND_expression • LOGICAL_AND M inclusive_OR_expression
   60 logical_OR_expression: logical_AND_expression •

    LOGICAL_AND  shift, and go to state 207

    $default  reduce using rule 60 (logical_OR_expression)


State 109

   61 logical_OR_expression: logical_OR_expression • LOGICAL_OR M logical_AND_expression
   62 conditional_expression: logical_OR_expression •
   63                       | logical_OR_expression • N QUESTION M expression N COLON M conditional_expression

    LOGICAL_OR  shift, and go to state 208

    QUESTION  reduce using rule 65 (N)
    $default  reduce using rule 62 (conditional_expression)

    N  go to state 209


State 110

   66 assignment_expression: conditional_expression •

    $default  reduce using rule 66 (assignment_expression)


State 111

   79 expression: assignment_expression •

    $default  reduce using rule 79 (expression)


State 112

   80 expression: expression • COMMA assignment_expression
  187 expression_statement: expression • SEMICOLON

    SEMICOLON  shift, and go to state 210
    COMMA      shift, and go to state 211


State 113

  185 block_item: declaration •

    $default  reduce using rule 185 (block_item)


State 114

  186 block_item: statement •

    $default  reduce using rule 186 (block_item)


State 115

  172 statement: labeled_statement •

    $default  reduce using rule 172 (statement)


State 116

  173 statement: compound_statement •

    $default  reduce using rule 173 (statement)


State 117

  181 compound_statement: CURLY_BRACKET_OPEN block_item_list • CURLY_BRACKET_CLOSE
  184 block_item_list: block_item_list • M block_item

    CURLY_BRACKET_CLOSE  shift, and go to state 212

    $default  reduce using rule 64 (M)

    M  go to state 213


State 118

  183 block_item_list: block_item •

    $default  reduce using rule 183 (block_item_list)


State 119

  174 statement: expression_statement •

    $default  reduce using rule 174 (statement)


State 120

  175 statement: selection_statement •

    $default  reduce using rule 175 (statement)


State 121

  176 statement: iteration_statement •

    $default  reduce using rule 176 (statement)


State 122

  177 statement: jump_statement •

    $default  reduce using rule 177 (statement)


State 123

  124 enumerator: IDENTIFIER •
  125           | IDENTIFIER • ASSIGN_t constant_expression

    ASSIGN_t  shift, and go to state 214

    $default  reduce using rule 124 (enumerator)


State 124

  117 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list • CURLY_BRACKET_CLOSE
  118               | ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list • COMMA CURLY_BRACKET_CLOSE
  123 enumerator_list: enumerator_list • COMMA enumerator

    CURLY_BRACKET_CLOSE  shift, and go to state 215
    COMMA                shift, and go to state 216


State 125

  122 enumerator_list: enumerator •

    $default  reduce using rule 122 (enumerator_list)


State 126

  133 direct_declarator: PARANTHESIS_OPEN declarator PARANTHESIS_CLOSE •

    $default  reduce using rule 133 (direct_declarator)


State 127

  150 type_qualifier_list: type_qualifier_list type_qualifier •

    $default  reduce using rule 150 (type_qualifier_list)


State 128

  147 pointer: ASTERISK type_qualifier_list pointer •

    $default  reduce using rule 147 (pointer)


State 129

   92 init_declarator_list: init_declarator_list COMMA init_declarator •

    $default  reduce using rule 92 (init_declarator_list)


State 130

   94 init_declarator: declarator •
   95                | declarator • ASSIGN_t initializer

    ASSIGN_t  shift, and go to state 59

    $default  reduce using rule 94 (init_declarator)


State 131

  161 initializer: CURLY_BRACKET_OPEN • initializer_list CURLY_BRACKET_CLOSE
  162            | CURLY_BRACKET_OPEN • initializer_list COMMA CURLY_BRACKET_CLOSE

    SQ_BRACKET_OPEN  shift, and go to state 217
    PERIOD           shift, and go to state 218

    $default  reduce using rule 166 (designation_opt)

    initializer_list  go to state 219
    designation_opt   go to state 220
    designation       go to state 221
    designator_list   go to state 222
    designator        go to state 223


State 132

    1 primary_expression: IDENTIFIER •

    $default  reduce using rule 1 (primary_expression)


State 133

  160 initializer: assignment_expression •

    $default  reduce using rule 160 (initializer)


State 134

   95 init_declarator: declarator ASSIGN_t initializer •

    $default  reduce using rule 95 (init_declarator)


State 135

  208 declaration_list: declaration_list declaration •

    $default  reduce using rule 208 (declaration_list)


State 136

  204 function_definition: declaration_specifiers declarator declaration_list compound_statement •

    $default  reduce using rule 204 (function_definition)


State 137

  157 identifier_list: IDENTIFIER •

    $default  reduce using rule 157 (identifier_list)


State 138

  155 parameter_declaration: declaration_specifiers • declarator
  156                      | declaration_specifiers •

    PARANTHESIS_OPEN  shift, and go to state 35
    ASTERISK          shift, and go to state 36
    IDENTIFIER        shift, and go to state 38

    $default  reduce using rule 156 (parameter_declaration)

    declarator         go to state 224
    direct_declarator  go to state 42
    pointer            go to state 43


State 139

  139 direct_declarator: direct_declarator PARANTHESIS_OPEN parameter_type_list_opt • PARANTHESIS_CLOSE

    PARANTHESIS_CLOSE  shift, and go to state 225


State 140

  141 parameter_type_list_opt: parameter_type_list •

    $default  reduce using rule 141 (parameter_type_list_opt)


State 141

  151 parameter_type_list: parameter_list •
  152                    | parameter_list • COMMA ELLIPSIS
  154 parameter_list: parameter_list • COMMA parameter_declaration

    COMMA  shift, and go to state 226

    $default  reduce using rule 151 (parameter_type_list)


State 142

  153 parameter_list: parameter_declaration •

    $default  reduce using rule 153 (parameter_list)


State 143

  140 direct_declarator: direct_declarator PARANTHESIS_OPEN identifier_list • PARANTHESIS_CLOSE
  158 identifier_list: identifier_list • COMMA IDENTIFIER

    PARANTHESIS_CLOSE  shift, and go to state 227
    COMMA              shift, and go to state 228


State 144

  136 direct_declarator: direct_declarator SQ_BRACKET_OPEN STATIC • type_qualifier_list assignment_expression SQ_BRACKET_CLOSE

    RESTRICT  shift, and go to state 3
    VOLATILE  shift, and go to state 9
    CONST     shift, and go to state 12

    type_qualifier       go to state 54
    type_qualifier_list  go to state 229


State 145

  134 direct_declarator: direct_declarator SQ_BRACKET_OPEN type_qualifier_list_opt • SQ_BRACKET_CLOSE
  135                  | direct_declarator SQ_BRACKET_OPEN type_qualifier_list_opt • assignment_expression SQ_BRACKET_CLOSE
  138                  | direct_declarator SQ_BRACKET_OPEN type_qualifier_list_opt • ASTERISK SQ_BRACKET_CLOSE

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    SQ_BRACKET_CLOSE  shift, and go to state 230
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 231
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 232


State 146

  137 direct_declarator: direct_declarator SQ_BRACKET_OPEN type_qualifier_list • STATIC assignment_expression SQ_BRACKET_CLOSE
  143 type_qualifier_list_opt: type_qualifier_list •
  150 type_qualifier_list: type_qualifier_list • type_qualifier

    RESTRICT  shift, and go to state 3
    VOLATILE  shift, and go to state 9
    CONST     shift, and go to state 12
    STATIC    shift, and go to state 233

    $default  reduce using rule 143 (type_qualifier_list_opt)

    type_qualifier  go to state 127


State 147

  197 jump_statement: BREAK SEMICOLON •

    $default  reduce using rule 197 (jump_statement)


State 148

   32 cast_expression: unary_expression •

    $default  reduce using rule 32 (cast_expression)


State 149

   81 constant_expression: conditional_expression •

    $default  reduce using rule 81 (constant_expression)


State 150

  179 labeled_statement: CASE constant_expression • COLON statement

    COLON  shift, and go to state 234


State 151

  194 iteration_statement: FOR PARANTHESIS_OPEN • expression_statement M expression_statement N M expression N PARANTHESIS_CLOSE M statement

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    SEMICOLON         shift, and go to state 88
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    expression_statement       go to state 235


State 152

  192 iteration_statement: WHILE M • PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement

    PARANTHESIS_OPEN  shift, and go to state 236


State 153

  195 jump_statement: GOTO_t IDENTIFIER • SEMICOLON

    SEMICOLON  shift, and go to state 237


State 154

    4 primary_expression: PARANTHESIS_OPEN • expression PARANTHESIS_CLOSE
   16 postfix_expression: PARANTHESIS_OPEN • type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | PARANTHESIS_OPEN • type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   25 unary_expression: SIZEOF PARANTHESIS_OPEN • type_name PARANTHESIS_CLOSE

    ENUM              shift, and go to state 2
    RESTRICT          shift, and go to state 3
    UNSIGNED          shift, and go to state 4
    VOID_t            shift, and go to state 6
    FLOAT_t           shift, and go to state 7
    SHORT             shift, and go to state 8
    VOLATILE          shift, and go to state 9
    CHAR_t            shift, and go to state 10
    SIGNED            shift, and go to state 11
    CONST             shift, and go to state 12
    SIZEOF            shift, and go to state 71
    BOOL_t            shift, and go to state 13
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 17
    INT_t             shift, and go to state 18
    DOUBLE            shift, and go to state 19
    LONG              shift, and go to state 20
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 163
    type_specifier             go to state 164
    specifier_qualifier_list   go to state 165
    enum_specifier             go to state 26
    type_qualifier             go to state 166
    type_name                  go to state 238


State 155

   24 unary_expression: SIZEOF unary_expression •

    $default  reduce using rule 24 (unary_expression)


State 156

  196 jump_statement: CONTINUE SEMICOLON •

    $default  reduce using rule 196 (jump_statement)


State 157

  189 selection_statement: IF PARANTHESIS_OPEN • expression N PARANTHESIS_CLOSE M statement N
  190                    | IF PARANTHESIS_OPEN • expression N PARANTHESIS_CLOSE M statement N ELSE M statement N

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 239


State 158

  198 jump_statement: RETURN_t SEMICOLON •

    $default  reduce using rule 198 (jump_statement)


State 159

   80 expression: expression • COMMA assignment_expression
  199 jump_statement: RETURN_t expression • SEMICOLON

    SEMICOLON  shift, and go to state 240
    COMMA      shift, and go to state 211


State 160

  180 labeled_statement: DEFAULT COLON • statement

    BREAK               shift, and go to state 66
    CASE                shift, and go to state 67
    FOR                 shift, and go to state 68
    WHILE               shift, and go to state 69
    GOTO_t              shift, and go to state 70
    SIZEOF              shift, and go to state 71
    CONTINUE            shift, and go to state 72
    IF                  shift, and go to state 73
    RETURN_t            shift, and go to state 74
    DEFAULT             shift, and go to state 75
    DO                  shift, and go to state 76
    SWITCH              shift, and go to state 77
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 50
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    SEMICOLON           shift, and go to state 88
    IDENTIFIER          shift, and go to state 89
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 241
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 161

  193 iteration_statement: DO M • statement M WHILE PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE SEMICOLON

    BREAK               shift, and go to state 66
    CASE                shift, and go to state 67
    FOR                 shift, and go to state 68
    WHILE               shift, and go to state 69
    GOTO_t              shift, and go to state 70
    SIZEOF              shift, and go to state 71
    CONTINUE            shift, and go to state 72
    IF                  shift, and go to state 73
    RETURN_t            shift, and go to state 74
    DEFAULT             shift, and go to state 75
    DO                  shift, and go to state 76
    SWITCH              shift, and go to state 77
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 50
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    SEMICOLON           shift, and go to state 88
    IDENTIFIER          shift, and go to state 89
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 242
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 162

  191 selection_statement: SWITCH PARANTHESIS_OPEN • expression PARANTHESIS_CLOSE statement

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 243


State 163

    4 primary_expression: PARANTHESIS_OPEN expression • PARANTHESIS_CLOSE
   80 expression: expression • COMMA assignment_expression

    PARANTHESIS_CLOSE  shift, and go to state 244
    COMMA              shift, and go to state 211


State 164

  113 specifier_qualifier_list: type_specifier • specifier_qualifier_list_opt

    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    VOID_t     shift, and go to state 6
    FLOAT_t    shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR_t     shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL_t     shift, and go to state 13
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 17
    INT_t      shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20

    $default  reduce using rule 116 (specifier_qualifier_list_opt)

    type_specifier                go to state 164
    specifier_qualifier_list      go to state 245
    specifier_qualifier_list_opt  go to state 246
    enum_specifier                go to state 26
    type_qualifier                go to state 166


State 165

  159 type_name: specifier_qualifier_list •

    $default  reduce using rule 159 (type_name)


State 166

  114 specifier_qualifier_list: type_qualifier • specifier_qualifier_list_opt

    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    VOID_t     shift, and go to state 6
    FLOAT_t    shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR_t     shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL_t     shift, and go to state 13
    COMPLEX    shift, and go to state 15
    IMAGINARY  shift, and go to state 17
    INT_t      shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20

    $default  reduce using rule 116 (specifier_qualifier_list_opt)

    type_specifier                go to state 164
    specifier_qualifier_list      go to state 245
    specifier_qualifier_list_opt  go to state 247
    enum_specifier                go to state 26
    type_qualifier                go to state 166


State 167

   16 postfix_expression: PARANTHESIS_OPEN type_name • PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | PARANTHESIS_OPEN type_name • PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   33 cast_expression: PARANTHESIS_OPEN type_name • PARANTHESIS_CLOSE cast_expression

    PARANTHESIS_CLOSE  shift, and go to state 248


State 168

    4 primary_expression: PARANTHESIS_OPEN • expression PARANTHESIS_CLOSE
   16 postfix_expression: PARANTHESIS_OPEN • type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | PARANTHESIS_OPEN • type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

    ENUM              shift, and go to state 2
    RESTRICT          shift, and go to state 3
    UNSIGNED          shift, and go to state 4
    VOID_t            shift, and go to state 6
    FLOAT_t           shift, and go to state 7
    SHORT             shift, and go to state 8
    VOLATILE          shift, and go to state 9
    CHAR_t            shift, and go to state 10
    SIGNED            shift, and go to state 11
    CONST             shift, and go to state 12
    SIZEOF            shift, and go to state 71
    BOOL_t            shift, and go to state 13
    COMPLEX           shift, and go to state 15
    IMAGINARY         shift, and go to state 17
    INT_t             shift, and go to state 18
    DOUBLE            shift, and go to state 19
    LONG              shift, and go to state 20
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 163
    type_specifier             go to state 164
    specifier_qualifier_list   go to state 165
    enum_specifier             go to state 26
    type_qualifier             go to state 166
    type_name                  go to state 249


State 169

   21 unary_expression: INCREMENT unary_expression •

    $default  reduce using rule 21 (unary_expression)


State 170

   22 unary_expression: DECREMENT unary_expression •

    $default  reduce using rule 22 (unary_expression)


State 171

  178 labeled_statement: IDENTIFIER COLON • statement

    BREAK               shift, and go to state 66
    CASE                shift, and go to state 67
    FOR                 shift, and go to state 68
    WHILE               shift, and go to state 69
    GOTO_t              shift, and go to state 70
    SIZEOF              shift, and go to state 71
    CONTINUE            shift, and go to state 72
    IF                  shift, and go to state 73
    RETURN_t            shift, and go to state 74
    DEFAULT             shift, and go to state 75
    DO                  shift, and go to state 76
    SWITCH              shift, and go to state 77
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 50
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    SEMICOLON           shift, and go to state 88
    IDENTIFIER          shift, and go to state 89
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 250
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 172

   10 postfix_expression: postfix_expression PARANTHESIS_OPEN • PARANTHESIS_CLOSE
   11                   | postfix_expression PARANTHESIS_OPEN • argument_expression_list PARANTHESIS_CLOSE

    SIZEOF             shift, and go to state 71
    PARANTHESIS_OPEN   shift, and go to state 78
    PARANTHESIS_CLOSE  shift, and go to state 251
    INCREMENT          shift, and go to state 80
    DECREMENT          shift, and go to state 81
    AMPERSAND          shift, and go to state 82
    ASTERISK           shift, and go to state 83
    PLUS               shift, and go to state 84
    MINUS              shift, and go to state 85
    TILDE              shift, and go to state 86
    EXCLAMATION        shift, and go to state 87
    IDENTIFIER         shift, and go to state 132
    CONSTANT_INT       shift, and go to state 90
    CONSTANT_FLOAT     shift, and go to state 91
    CONSTANT_CHAR      shift, and go to state 92
    LITERAL            shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    argument_expression_list   go to state 252
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 253


State 173

    9 postfix_expression: postfix_expression SQ_BRACKET_OPEN • expression SQ_BRACKET_CLOSE

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 254


State 174

   12 postfix_expression: postfix_expression PERIOD • IDENTIFIER

    IDENTIFIER  shift, and go to state 255


State 175

   13 postfix_expression: postfix_expression ARROW • IDENTIFIER

    IDENTIFIER  shift, and go to state 256


State 176

   14 postfix_expression: postfix_expression INCREMENT •

    $default  reduce using rule 14 (postfix_expression)


State 177

   15 postfix_expression: postfix_expression DECREMENT •

    $default  reduce using rule 15 (postfix_expression)


State 178

   68 assignment_operator: ASSIGN_t •

    $default  reduce using rule 68 (assignment_operator)


State 179

   69 assignment_operator: MULTIPLY_ASSIGN •

    $default  reduce using rule 69 (assignment_operator)


State 180

   70 assignment_operator: DIVIDE_ASSIGN •

    $default  reduce using rule 70 (assignment_operator)


State 181

   71 assignment_operator: MOD_ASSIGN •

    $default  reduce using rule 71 (assignment_operator)


State 182

   72 assignment_operator: PLUS_ASSIGN •

    $default  reduce using rule 72 (assignment_operator)


State 183

   73 assignment_operator: MINUS_ASSIGN •

    $default  reduce using rule 73 (assignment_operator)


State 184

   74 assignment_operator: LEFT_SHIFT_ASSIGN •

    $default  reduce using rule 74 (assignment_operator)


State 185

   75 assignment_operator: RIGHT_SHIFT_ASSIGN •

    $default  reduce using rule 75 (assignment_operator)


State 186

   76 assignment_operator: AND_ASSIGN •

    $default  reduce using rule 76 (assignment_operator)


State 187

   77 assignment_operator: XOR_ASSIGN •

    $default  reduce using rule 77 (assignment_operator)


State 188

   78 assignment_operator: OR_ASSIGN •

    $default  reduce using rule 78 (assignment_operator)


State 189

   67 assignment_expression: unary_expression assignment_operator • assignment_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 257


State 190

   23 unary_expression: unary_operator cast_expression •

    $default  reduce using rule 23 (unary_expression)


State 191

   35 multiplicative_expression: multiplicative_expression ASTERISK • cast_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression  go to state 94
    constant            go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 148
    unary_operator      go to state 98
    cast_expression     go to state 258


State 192

   36 multiplicative_expression: multiplicative_expression SLASH • cast_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression  go to state 94
    constant            go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 148
    unary_operator      go to state 98
    cast_expression     go to state 259


State 193

   37 multiplicative_expression: multiplicative_expression PERCENT • cast_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression  go to state 94
    constant            go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 148
    unary_operator      go to state 98
    cast_expression     go to state 260


State 194

   39 additive_expression: additive_expression PLUS • multiplicative_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 261


State 195

   40 additive_expression: additive_expression MINUS • multiplicative_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 262


State 196

   42 shift_expression: shift_expression LEFT_SHIFT • additive_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 263


State 197

   43 shift_expression: shift_expression RIGHT_SHIFT • additive_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 264


State 198

   45 relational_expression: relational_expression LESS_THAN • shift_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 265


State 199

   46 relational_expression: relational_expression GREATER_THAN • shift_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 266


State 200

   47 relational_expression: relational_expression LESS_THAN_EQUAL • shift_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 267


State 201

   48 relational_expression: relational_expression GREATER_THAN_EQUAL • shift_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 268


State 202

   50 equality_expression: equality_expression EQUAL • relational_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 269


State 203

   51 equality_expression: equality_expression NOT_EQUAL • relational_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 270


State 204

   53 AND_expression: AND_expression AMPERSAND • equality_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 271


State 205

   55 exclusive_OR_expression: exclusive_OR_expression CARET • AND_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 272


State 206

   57 inclusive_OR_expression: inclusive_OR_expression PIPE • exclusive_OR_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 273


State 207

   59 logical_AND_expression: logical_AND_expression LOGICAL_AND • M inclusive_OR_expression

    $default  reduce using rule 64 (M)

    M  go to state 274


State 208

   61 logical_OR_expression: logical_OR_expression LOGICAL_OR • M logical_AND_expression

    $default  reduce using rule 64 (M)

    M  go to state 275


State 209

   63 conditional_expression: logical_OR_expression N • QUESTION M expression N COLON M conditional_expression

    QUESTION  shift, and go to state 276


State 210

  187 expression_statement: expression SEMICOLON •

    $default  reduce using rule 187 (expression_statement)


State 211

   80 expression: expression COMMA • assignment_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 277


State 212

  181 compound_statement: CURLY_BRACKET_OPEN block_item_list CURLY_BRACKET_CLOSE •

    $default  reduce using rule 181 (compound_statement)


State 213

  184 block_item_list: block_item_list M • block_item

    AUTO                shift, and go to state 1
    ENUM                shift, and go to state 2
    RESTRICT            shift, and go to state 3
    UNSIGNED            shift, and go to state 4
    BREAK               shift, and go to state 66
    EXTERN              shift, and go to state 5
    VOID_t              shift, and go to state 6
    CASE                shift, and go to state 67
    FLOAT_t             shift, and go to state 7
    SHORT               shift, and go to state 8
    VOLATILE            shift, and go to state 9
    CHAR_t              shift, and go to state 10
    FOR                 shift, and go to state 68
    SIGNED              shift, and go to state 11
    WHILE               shift, and go to state 69
    CONST               shift, and go to state 12
    GOTO_t              shift, and go to state 70
    SIZEOF              shift, and go to state 71
    BOOL_t              shift, and go to state 13
    CONTINUE            shift, and go to state 72
    IF                  shift, and go to state 73
    STATIC              shift, and go to state 14
    COMPLEX             shift, and go to state 15
    RETURN_t            shift, and go to state 74
    DEFAULT             shift, and go to state 75
    INLINE              shift, and go to state 16
    IMAGINARY           shift, and go to state 17
    DO                  shift, and go to state 76
    INT_t               shift, and go to state 18
    SWITCH              shift, and go to state 77
    DOUBLE              shift, and go to state 19
    LONG                shift, and go to state 20
    REGISTER            shift, and go to state 21
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 50
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    SEMICOLON           shift, and go to state 88
    IDENTIFIER          shift, and go to state 89
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    declaration                go to state 113
    declaration_specifiers     go to state 61
    storage_class_specifier    go to state 24
    type_specifier             go to state 25
    enum_specifier             go to state 26
    type_qualifier             go to state 27
    function_specifier         go to state 28
    statement                  go to state 114
    labeled_statement          go to state 115
    compound_statement         go to state 116
    block_item                 go to state 278
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 214

  125 enumerator: IDENTIFIER ASSIGN_t • constant_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 149
    constant_expression        go to state 279


State 215

  117 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list CURLY_BRACKET_CLOSE •

    $default  reduce using rule 117 (enum_specifier)


State 216

  118 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list COMMA • CURLY_BRACKET_CLOSE
  123 enumerator_list: enumerator_list COMMA • enumerator

    CURLY_BRACKET_CLOSE  shift, and go to state 280
    IDENTIFIER           shift, and go to state 123

    enumerator  go to state 281


State 217

  170 designator: SQ_BRACKET_OPEN • constant_expression SQ_BRACKET_CLOSE

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 149
    constant_expression        go to state 282


State 218

  171 designator: PERIOD • IDENTIFIER

    IDENTIFIER  shift, and go to state 283


State 219

  161 initializer: CURLY_BRACKET_OPEN initializer_list • CURLY_BRACKET_CLOSE
  162            | CURLY_BRACKET_OPEN initializer_list • COMMA CURLY_BRACKET_CLOSE
  164 initializer_list: initializer_list • COMMA designation_opt initializer

    CURLY_BRACKET_CLOSE  shift, and go to state 284
    COMMA                shift, and go to state 285


State 220

  163 initializer_list: designation_opt • initializer

    SIZEOF              shift, and go to state 71
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 131
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    IDENTIFIER          shift, and go to state 132
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 133
    initializer                go to state 286


State 221

  165 designation_opt: designation •

    $default  reduce using rule 165 (designation_opt)


State 222

  167 designation: designator_list • ASSIGN_t
  169 designator_list: designator_list • designator

    SQ_BRACKET_OPEN  shift, and go to state 217
    PERIOD           shift, and go to state 218
    ASSIGN_t         shift, and go to state 287

    designator  go to state 288


State 223

  168 designator_list: designator •

    $default  reduce using rule 168 (designator_list)


State 224

  155 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 155 (parameter_declaration)


State 225

  139 direct_declarator: direct_declarator PARANTHESIS_OPEN parameter_type_list_opt PARANTHESIS_CLOSE •

    $default  reduce using rule 139 (direct_declarator)


State 226

  152 parameter_type_list: parameter_list COMMA • ELLIPSIS
  154 parameter_list: parameter_list COMMA • parameter_declaration

    AUTO       shift, and go to state 1
    ENUM       shift, and go to state 2
    RESTRICT   shift, and go to state 3
    UNSIGNED   shift, and go to state 4
    EXTERN     shift, and go to state 5
    VOID_t     shift, and go to state 6
    FLOAT_t    shift, and go to state 7
    SHORT      shift, and go to state 8
    VOLATILE   shift, and go to state 9
    CHAR_t     shift, and go to state 10
    SIGNED     shift, and go to state 11
    CONST      shift, and go to state 12
    BOOL_t     shift, and go to state 13
    STATIC     shift, and go to state 14
    COMPLEX    shift, and go to state 15
    INLINE     shift, and go to state 16
    IMAGINARY  shift, and go to state 17
    INT_t      shift, and go to state 18
    DOUBLE     shift, and go to state 19
    LONG       shift, and go to state 20
    REGISTER   shift, and go to state 21
    ELLIPSIS   shift, and go to state 289

    declaration_specifiers   go to state 138
    storage_class_specifier  go to state 24
    type_specifier           go to state 25
    enum_specifier           go to state 26
    type_qualifier           go to state 27
    function_specifier       go to state 28
    parameter_declaration    go to state 290


State 227

  140 direct_declarator: direct_declarator PARANTHESIS_OPEN identifier_list PARANTHESIS_CLOSE •

    $default  reduce using rule 140 (direct_declarator)


State 228

  158 identifier_list: identifier_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 291


State 229

  136 direct_declarator: direct_declarator SQ_BRACKET_OPEN STATIC type_qualifier_list • assignment_expression SQ_BRACKET_CLOSE
  150 type_qualifier_list: type_qualifier_list • type_qualifier

    RESTRICT          shift, and go to state 3
    VOLATILE          shift, and go to state 9
    CONST             shift, and go to state 12
    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 292
    type_qualifier             go to state 127


State 230

  134 direct_declarator: direct_declarator SQ_BRACKET_OPEN type_qualifier_list_opt SQ_BRACKET_CLOSE •

    $default  reduce using rule 134 (direct_declarator)


State 231

   27 unary_operator: ASTERISK •
  138 direct_declarator: direct_declarator SQ_BRACKET_OPEN type_qualifier_list_opt ASTERISK • SQ_BRACKET_CLOSE

    SQ_BRACKET_CLOSE  shift, and go to state 293

    $default  reduce using rule 27 (unary_operator)


State 232

  135 direct_declarator: direct_declarator SQ_BRACKET_OPEN type_qualifier_list_opt assignment_expression • SQ_BRACKET_CLOSE

    SQ_BRACKET_CLOSE  shift, and go to state 294


State 233

  137 direct_declarator: direct_declarator SQ_BRACKET_OPEN type_qualifier_list STATIC • assignment_expression SQ_BRACKET_CLOSE

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 295


State 234

  179 labeled_statement: CASE constant_expression COLON • statement

    BREAK               shift, and go to state 66
    CASE                shift, and go to state 67
    FOR                 shift, and go to state 68
    WHILE               shift, and go to state 69
    GOTO_t              shift, and go to state 70
    SIZEOF              shift, and go to state 71
    CONTINUE            shift, and go to state 72
    IF                  shift, and go to state 73
    RETURN_t            shift, and go to state 74
    DEFAULT             shift, and go to state 75
    DO                  shift, and go to state 76
    SWITCH              shift, and go to state 77
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 50
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    SEMICOLON           shift, and go to state 88
    IDENTIFIER          shift, and go to state 89
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 296
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 235

  194 iteration_statement: FOR PARANTHESIS_OPEN expression_statement • M expression_statement N M expression N PARANTHESIS_CLOSE M statement

    $default  reduce using rule 64 (M)

    M  go to state 297


State 236

  192 iteration_statement: WHILE M PARANTHESIS_OPEN • expression N PARANTHESIS_CLOSE M statement

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 298


State 237

  195 jump_statement: GOTO_t IDENTIFIER SEMICOLON •

    $default  reduce using rule 195 (jump_statement)


State 238

   16 postfix_expression: PARANTHESIS_OPEN type_name • PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | PARANTHESIS_OPEN type_name • PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   25 unary_expression: SIZEOF PARANTHESIS_OPEN type_name • PARANTHESIS_CLOSE

    PARANTHESIS_CLOSE  shift, and go to state 299


State 239

   80 expression: expression • COMMA assignment_expression
  189 selection_statement: IF PARANTHESIS_OPEN expression • N PARANTHESIS_CLOSE M statement N
  190                    | IF PARANTHESIS_OPEN expression • N PARANTHESIS_CLOSE M statement N ELSE M statement N

    COMMA  shift, and go to state 211

    $default  reduce using rule 65 (N)

    N  go to state 300


State 240

  199 jump_statement: RETURN_t expression SEMICOLON •

    $default  reduce using rule 199 (jump_statement)


State 241

  180 labeled_statement: DEFAULT COLON statement •

    $default  reduce using rule 180 (labeled_statement)


State 242

  193 iteration_statement: DO M statement • M WHILE PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE SEMICOLON

    $default  reduce using rule 64 (M)

    M  go to state 301


State 243

   80 expression: expression • COMMA assignment_expression
  191 selection_statement: SWITCH PARANTHESIS_OPEN expression • PARANTHESIS_CLOSE statement

    PARANTHESIS_CLOSE  shift, and go to state 302
    COMMA              shift, and go to state 211


State 244

    4 primary_expression: PARANTHESIS_OPEN expression PARANTHESIS_CLOSE •

    $default  reduce using rule 4 (primary_expression)


State 245

  115 specifier_qualifier_list_opt: specifier_qualifier_list •

    $default  reduce using rule 115 (specifier_qualifier_list_opt)


State 246

  113 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt •

    $default  reduce using rule 113 (specifier_qualifier_list)


State 247

  114 specifier_qualifier_list: type_qualifier specifier_qualifier_list_opt •

    $default  reduce using rule 114 (specifier_qualifier_list)


State 248

   16 postfix_expression: PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE • CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE • CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   33 cast_expression: PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE • cast_expression

    SIZEOF              shift, and go to state 71
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 303
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    IDENTIFIER          shift, and go to state 132
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression  go to state 94
    constant            go to state 95
    postfix_expression  go to state 96
    unary_expression    go to state 148
    unary_operator      go to state 98
    cast_expression     go to state 304


State 249

   16 postfix_expression: PARANTHESIS_OPEN type_name • PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | PARANTHESIS_OPEN type_name • PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

    PARANTHESIS_CLOSE  shift, and go to state 305


State 250

  178 labeled_statement: IDENTIFIER COLON statement •

    $default  reduce using rule 178 (labeled_statement)


State 251

   10 postfix_expression: postfix_expression PARANTHESIS_OPEN PARANTHESIS_CLOSE •

    $default  reduce using rule 10 (postfix_expression)


State 252

   11 postfix_expression: postfix_expression PARANTHESIS_OPEN argument_expression_list • PARANTHESIS_CLOSE
   19 argument_expression_list: argument_expression_list • COMMA assignment_expression

    PARANTHESIS_CLOSE  shift, and go to state 306
    COMMA              shift, and go to state 307


State 253

   18 argument_expression_list: assignment_expression •

    $default  reduce using rule 18 (argument_expression_list)


State 254

    9 postfix_expression: postfix_expression SQ_BRACKET_OPEN expression • SQ_BRACKET_CLOSE
   80 expression: expression • COMMA assignment_expression

    SQ_BRACKET_CLOSE  shift, and go to state 308
    COMMA             shift, and go to state 211


State 255

   12 postfix_expression: postfix_expression PERIOD IDENTIFIER •

    $default  reduce using rule 12 (postfix_expression)


State 256

   13 postfix_expression: postfix_expression ARROW IDENTIFIER •

    $default  reduce using rule 13 (postfix_expression)


State 257

   67 assignment_expression: unary_expression assignment_operator assignment_expression •

    $default  reduce using rule 67 (assignment_expression)


State 258

   35 multiplicative_expression: multiplicative_expression ASTERISK cast_expression •

    $default  reduce using rule 35 (multiplicative_expression)


State 259

   36 multiplicative_expression: multiplicative_expression SLASH cast_expression •

    $default  reduce using rule 36 (multiplicative_expression)


State 260

   37 multiplicative_expression: multiplicative_expression PERCENT cast_expression •

    $default  reduce using rule 37 (multiplicative_expression)


State 261

   35 multiplicative_expression: multiplicative_expression • ASTERISK cast_expression
   36                          | multiplicative_expression • SLASH cast_expression
   37                          | multiplicative_expression • PERCENT cast_expression
   39 additive_expression: additive_expression PLUS multiplicative_expression •

    ASTERISK  shift, and go to state 191
    SLASH     shift, and go to state 192
    PERCENT   shift, and go to state 193

    $default  reduce using rule 39 (additive_expression)


State 262

   35 multiplicative_expression: multiplicative_expression • ASTERISK cast_expression
   36                          | multiplicative_expression • SLASH cast_expression
   37                          | multiplicative_expression • PERCENT cast_expression
   40 additive_expression: additive_expression MINUS multiplicative_expression •

    ASTERISK  shift, and go to state 191
    SLASH     shift, and go to state 192
    PERCENT   shift, and go to state 193

    $default  reduce using rule 40 (additive_expression)


State 263

   39 additive_expression: additive_expression • PLUS multiplicative_expression
   40                    | additive_expression • MINUS multiplicative_expression
   42 shift_expression: shift_expression LEFT_SHIFT additive_expression •

    PLUS   shift, and go to state 194
    MINUS  shift, and go to state 195

    $default  reduce using rule 42 (shift_expression)


State 264

   39 additive_expression: additive_expression • PLUS multiplicative_expression
   40                    | additive_expression • MINUS multiplicative_expression
   43 shift_expression: shift_expression RIGHT_SHIFT additive_expression •

    PLUS   shift, and go to state 194
    MINUS  shift, and go to state 195

    $default  reduce using rule 43 (shift_expression)


State 265

   42 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   43                 | shift_expression • RIGHT_SHIFT additive_expression
   45 relational_expression: relational_expression LESS_THAN shift_expression •

    LEFT_SHIFT   shift, and go to state 196
    RIGHT_SHIFT  shift, and go to state 197

    $default  reduce using rule 45 (relational_expression)


State 266

   42 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   43                 | shift_expression • RIGHT_SHIFT additive_expression
   46 relational_expression: relational_expression GREATER_THAN shift_expression •

    LEFT_SHIFT   shift, and go to state 196
    RIGHT_SHIFT  shift, and go to state 197

    $default  reduce using rule 46 (relational_expression)


State 267

   42 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   43                 | shift_expression • RIGHT_SHIFT additive_expression
   47 relational_expression: relational_expression LESS_THAN_EQUAL shift_expression •

    LEFT_SHIFT   shift, and go to state 196
    RIGHT_SHIFT  shift, and go to state 197

    $default  reduce using rule 47 (relational_expression)


State 268

   42 shift_expression: shift_expression • LEFT_SHIFT additive_expression
   43                 | shift_expression • RIGHT_SHIFT additive_expression
   48 relational_expression: relational_expression GREATER_THAN_EQUAL shift_expression •

    LEFT_SHIFT   shift, and go to state 196
    RIGHT_SHIFT  shift, and go to state 197

    $default  reduce using rule 48 (relational_expression)


State 269

   45 relational_expression: relational_expression • LESS_THAN shift_expression
   46                      | relational_expression • GREATER_THAN shift_expression
   47                      | relational_expression • LESS_THAN_EQUAL shift_expression
   48                      | relational_expression • GREATER_THAN_EQUAL shift_expression
   50 equality_expression: equality_expression EQUAL relational_expression •

    LESS_THAN           shift, and go to state 198
    GREATER_THAN        shift, and go to state 199
    LESS_THAN_EQUAL     shift, and go to state 200
    GREATER_THAN_EQUAL  shift, and go to state 201

    $default  reduce using rule 50 (equality_expression)


State 270

   45 relational_expression: relational_expression • LESS_THAN shift_expression
   46                      | relational_expression • GREATER_THAN shift_expression
   47                      | relational_expression • LESS_THAN_EQUAL shift_expression
   48                      | relational_expression • GREATER_THAN_EQUAL shift_expression
   51 equality_expression: equality_expression NOT_EQUAL relational_expression •

    LESS_THAN           shift, and go to state 198
    GREATER_THAN        shift, and go to state 199
    LESS_THAN_EQUAL     shift, and go to state 200
    GREATER_THAN_EQUAL  shift, and go to state 201

    $default  reduce using rule 51 (equality_expression)


State 271

   50 equality_expression: equality_expression • EQUAL relational_expression
   51                    | equality_expression • NOT_EQUAL relational_expression
   53 AND_expression: AND_expression AMPERSAND equality_expression •

    EQUAL      shift, and go to state 202
    NOT_EQUAL  shift, and go to state 203

    $default  reduce using rule 53 (AND_expression)


State 272

   53 AND_expression: AND_expression • AMPERSAND equality_expression
   55 exclusive_OR_expression: exclusive_OR_expression CARET AND_expression •

    AMPERSAND  shift, and go to state 204

    $default  reduce using rule 55 (exclusive_OR_expression)


State 273

   55 exclusive_OR_expression: exclusive_OR_expression • CARET AND_expression
   57 inclusive_OR_expression: inclusive_OR_expression PIPE exclusive_OR_expression •

    CARET  shift, and go to state 205

    $default  reduce using rule 57 (inclusive_OR_expression)


State 274

   59 logical_AND_expression: logical_AND_expression LOGICAL_AND M • inclusive_OR_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 309


State 275

   61 logical_OR_expression: logical_OR_expression LOGICAL_OR M • logical_AND_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 310


State 276

   63 conditional_expression: logical_OR_expression N QUESTION • M expression N COLON M conditional_expression

    $default  reduce using rule 64 (M)

    M  go to state 311


State 277

   80 expression: expression COMMA assignment_expression •

    $default  reduce using rule 80 (expression)


State 278

  184 block_item_list: block_item_list M block_item •

    $default  reduce using rule 184 (block_item_list)


State 279

  125 enumerator: IDENTIFIER ASSIGN_t constant_expression •

    $default  reduce using rule 125 (enumerator)


State 280

  118 enum_specifier: ENUM identifier_opt CURLY_BRACKET_OPEN enumerator_list COMMA CURLY_BRACKET_CLOSE •

    $default  reduce using rule 118 (enum_specifier)


State 281

  123 enumerator_list: enumerator_list COMMA enumerator •

    $default  reduce using rule 123 (enumerator_list)


State 282

  170 designator: SQ_BRACKET_OPEN constant_expression • SQ_BRACKET_CLOSE

    SQ_BRACKET_CLOSE  shift, and go to state 312


State 283

  171 designator: PERIOD IDENTIFIER •

    $default  reduce using rule 171 (designator)


State 284

  161 initializer: CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE •

    $default  reduce using rule 161 (initializer)


State 285

  162 initializer: CURLY_BRACKET_OPEN initializer_list COMMA • CURLY_BRACKET_CLOSE
  164 initializer_list: initializer_list COMMA • designation_opt initializer

    SQ_BRACKET_OPEN      shift, and go to state 217
    CURLY_BRACKET_CLOSE  shift, and go to state 313
    PERIOD               shift, and go to state 218

    $default  reduce using rule 166 (designation_opt)

    designation_opt  go to state 314
    designation      go to state 221
    designator_list  go to state 222
    designator       go to state 223


State 286

  163 initializer_list: designation_opt initializer •

    $default  reduce using rule 163 (initializer_list)


State 287

  167 designation: designator_list ASSIGN_t •

    $default  reduce using rule 167 (designation)


State 288

  169 designator_list: designator_list designator •

    $default  reduce using rule 169 (designator_list)


State 289

  152 parameter_type_list: parameter_list COMMA ELLIPSIS •

    $default  reduce using rule 152 (parameter_type_list)


State 290

  154 parameter_list: parameter_list COMMA parameter_declaration •

    $default  reduce using rule 154 (parameter_list)


State 291

  158 identifier_list: identifier_list COMMA IDENTIFIER •

    $default  reduce using rule 158 (identifier_list)


State 292

  136 direct_declarator: direct_declarator SQ_BRACKET_OPEN STATIC type_qualifier_list assignment_expression • SQ_BRACKET_CLOSE

    SQ_BRACKET_CLOSE  shift, and go to state 315


State 293

  138 direct_declarator: direct_declarator SQ_BRACKET_OPEN type_qualifier_list_opt ASTERISK SQ_BRACKET_CLOSE •

    $default  reduce using rule 138 (direct_declarator)


State 294

  135 direct_declarator: direct_declarator SQ_BRACKET_OPEN type_qualifier_list_opt assignment_expression SQ_BRACKET_CLOSE •

    $default  reduce using rule 135 (direct_declarator)


State 295

  137 direct_declarator: direct_declarator SQ_BRACKET_OPEN type_qualifier_list STATIC assignment_expression • SQ_BRACKET_CLOSE

    SQ_BRACKET_CLOSE  shift, and go to state 316


State 296

  179 labeled_statement: CASE constant_expression COLON statement •

    $default  reduce using rule 179 (labeled_statement)


State 297

  194 iteration_statement: FOR PARANTHESIS_OPEN expression_statement M • expression_statement N M expression N PARANTHESIS_CLOSE M statement

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    SEMICOLON         shift, and go to state 88
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    expression_statement       go to state 317


State 298

   80 expression: expression • COMMA assignment_expression
  192 iteration_statement: WHILE M PARANTHESIS_OPEN expression • N PARANTHESIS_CLOSE M statement

    COMMA  shift, and go to state 211

    $default  reduce using rule 65 (N)

    N  go to state 318


State 299

   16 postfix_expression: PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE • CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE • CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE
   25 unary_expression: SIZEOF PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE •

    CURLY_BRACKET_OPEN  shift, and go to state 303

    $default  reduce using rule 25 (unary_expression)


State 300

  189 selection_statement: IF PARANTHESIS_OPEN expression N • PARANTHESIS_CLOSE M statement N
  190                    | IF PARANTHESIS_OPEN expression N • PARANTHESIS_CLOSE M statement N ELSE M statement N

    PARANTHESIS_CLOSE  shift, and go to state 319


State 301

  193 iteration_statement: DO M statement M • WHILE PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE SEMICOLON

    WHILE  shift, and go to state 320


State 302

  191 selection_statement: SWITCH PARANTHESIS_OPEN expression PARANTHESIS_CLOSE • statement

    BREAK               shift, and go to state 66
    CASE                shift, and go to state 67
    FOR                 shift, and go to state 68
    WHILE               shift, and go to state 69
    GOTO_t              shift, and go to state 70
    SIZEOF              shift, and go to state 71
    CONTINUE            shift, and go to state 72
    IF                  shift, and go to state 73
    RETURN_t            shift, and go to state 74
    DEFAULT             shift, and go to state 75
    DO                  shift, and go to state 76
    SWITCH              shift, and go to state 77
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 50
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    SEMICOLON           shift, and go to state 88
    IDENTIFIER          shift, and go to state 89
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 321
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 303

   16 postfix_expression: PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN • initializer_list CURLY_BRACKET_CLOSE
   17                   | PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN • initializer_list COMMA CURLY_BRACKET_CLOSE

    SQ_BRACKET_OPEN  shift, and go to state 217
    PERIOD           shift, and go to state 218

    $default  reduce using rule 166 (designation_opt)

    initializer_list  go to state 322
    designation_opt   go to state 220
    designation       go to state 221
    designator_list   go to state 222
    designator        go to state 223


State 304

   33 cast_expression: PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE cast_expression •

    $default  reduce using rule 33 (cast_expression)


State 305

   16 postfix_expression: PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE • CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE
   17                   | PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE • CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE

    CURLY_BRACKET_OPEN  shift, and go to state 303


State 306

   11 postfix_expression: postfix_expression PARANTHESIS_OPEN argument_expression_list PARANTHESIS_CLOSE •

    $default  reduce using rule 11 (postfix_expression)


State 307

   19 argument_expression_list: argument_expression_list COMMA • assignment_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 323


State 308

    9 postfix_expression: postfix_expression SQ_BRACKET_OPEN expression SQ_BRACKET_CLOSE •

    $default  reduce using rule 9 (postfix_expression)


State 309

   57 inclusive_OR_expression: inclusive_OR_expression • PIPE exclusive_OR_expression
   59 logical_AND_expression: logical_AND_expression LOGICAL_AND M inclusive_OR_expression •

    PIPE  shift, and go to state 206

    $default  reduce using rule 59 (logical_AND_expression)


State 310

   59 logical_AND_expression: logical_AND_expression • LOGICAL_AND M inclusive_OR_expression
   61 logical_OR_expression: logical_OR_expression LOGICAL_OR M logical_AND_expression •

    LOGICAL_AND  shift, and go to state 207

    $default  reduce using rule 61 (logical_OR_expression)


State 311

   63 conditional_expression: logical_OR_expression N QUESTION M • expression N COLON M conditional_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 324


State 312

  170 designator: SQ_BRACKET_OPEN constant_expression SQ_BRACKET_CLOSE •

    $default  reduce using rule 170 (designator)


State 313

  162 initializer: CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE •

    $default  reduce using rule 162 (initializer)


State 314

  164 initializer_list: initializer_list COMMA designation_opt • initializer

    SIZEOF              shift, and go to state 71
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 131
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    IDENTIFIER          shift, and go to state 132
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 133
    initializer                go to state 325


State 315

  136 direct_declarator: direct_declarator SQ_BRACKET_OPEN STATIC type_qualifier_list assignment_expression SQ_BRACKET_CLOSE •

    $default  reduce using rule 136 (direct_declarator)


State 316

  137 direct_declarator: direct_declarator SQ_BRACKET_OPEN type_qualifier_list STATIC assignment_expression SQ_BRACKET_CLOSE •

    $default  reduce using rule 137 (direct_declarator)


State 317

  194 iteration_statement: FOR PARANTHESIS_OPEN expression_statement M expression_statement • N M expression N PARANTHESIS_CLOSE M statement

    $default  reduce using rule 65 (N)

    N  go to state 326


State 318

  192 iteration_statement: WHILE M PARANTHESIS_OPEN expression N • PARANTHESIS_CLOSE M statement

    PARANTHESIS_CLOSE  shift, and go to state 327


State 319

  189 selection_statement: IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE • M statement N
  190                    | IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE • M statement N ELSE M statement N

    $default  reduce using rule 64 (M)

    M  go to state 328


State 320

  193 iteration_statement: DO M statement M WHILE • PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE SEMICOLON

    PARANTHESIS_OPEN  shift, and go to state 329


State 321

  191 selection_statement: SWITCH PARANTHESIS_OPEN expression PARANTHESIS_CLOSE statement •

    $default  reduce using rule 191 (selection_statement)


State 322

   16 postfix_expression: PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list • CURLY_BRACKET_CLOSE
   17                   | PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list • COMMA CURLY_BRACKET_CLOSE
  164 initializer_list: initializer_list • COMMA designation_opt initializer

    CURLY_BRACKET_CLOSE  shift, and go to state 330
    COMMA                shift, and go to state 331


State 323

   19 argument_expression_list: argument_expression_list COMMA assignment_expression •

    $default  reduce using rule 19 (argument_expression_list)


State 324

   63 conditional_expression: logical_OR_expression N QUESTION M expression • N COLON M conditional_expression
   80 expression: expression • COMMA assignment_expression

    COMMA  shift, and go to state 211

    $default  reduce using rule 65 (N)

    N  go to state 332


State 325

  164 initializer_list: initializer_list COMMA designation_opt initializer •

    $default  reduce using rule 164 (initializer_list)


State 326

  194 iteration_statement: FOR PARANTHESIS_OPEN expression_statement M expression_statement N • M expression N PARANTHESIS_CLOSE M statement

    $default  reduce using rule 64 (M)

    M  go to state 333


State 327

  192 iteration_statement: WHILE M PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE • M statement

    $default  reduce using rule 64 (M)

    M  go to state 334


State 328

  189 selection_statement: IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M • statement N
  190                    | IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M • statement N ELSE M statement N

    BREAK               shift, and go to state 66
    CASE                shift, and go to state 67
    FOR                 shift, and go to state 68
    WHILE               shift, and go to state 69
    GOTO_t              shift, and go to state 70
    SIZEOF              shift, and go to state 71
    CONTINUE            shift, and go to state 72
    IF                  shift, and go to state 73
    RETURN_t            shift, and go to state 74
    DEFAULT             shift, and go to state 75
    DO                  shift, and go to state 76
    SWITCH              shift, and go to state 77
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 50
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    SEMICOLON           shift, and go to state 88
    IDENTIFIER          shift, and go to state 89
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 335
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 329

  193 iteration_statement: DO M statement M WHILE PARANTHESIS_OPEN • expression N PARANTHESIS_CLOSE SEMICOLON

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 336


State 330

   16 postfix_expression: PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list CURLY_BRACKET_CLOSE •

    $default  reduce using rule 16 (postfix_expression)


State 331

   17 postfix_expression: PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA • CURLY_BRACKET_CLOSE
  164 initializer_list: initializer_list COMMA • designation_opt initializer

    SQ_BRACKET_OPEN      shift, and go to state 217
    CURLY_BRACKET_CLOSE  shift, and go to state 337
    PERIOD               shift, and go to state 218

    $default  reduce using rule 166 (designation_opt)

    designation_opt  go to state 314
    designation      go to state 221
    designator_list  go to state 222
    designator       go to state 223


State 332

   63 conditional_expression: logical_OR_expression N QUESTION M expression N • COLON M conditional_expression

    COLON  shift, and go to state 338


State 333

  194 iteration_statement: FOR PARANTHESIS_OPEN expression_statement M expression_statement N M • expression N PARANTHESIS_CLOSE M statement

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 339


State 334

  192 iteration_statement: WHILE M PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M • statement

    BREAK               shift, and go to state 66
    CASE                shift, and go to state 67
    FOR                 shift, and go to state 68
    WHILE               shift, and go to state 69
    GOTO_t              shift, and go to state 70
    SIZEOF              shift, and go to state 71
    CONTINUE            shift, and go to state 72
    IF                  shift, and go to state 73
    RETURN_t            shift, and go to state 74
    DEFAULT             shift, and go to state 75
    DO                  shift, and go to state 76
    SWITCH              shift, and go to state 77
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 50
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    SEMICOLON           shift, and go to state 88
    IDENTIFIER          shift, and go to state 89
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 340
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 335

  189 selection_statement: IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement • N
  190                    | IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement • N ELSE M statement N

    $default  reduce using rule 65 (N)

    N  go to state 341


State 336

   80 expression: expression • COMMA assignment_expression
  193 iteration_statement: DO M statement M WHILE PARANTHESIS_OPEN expression • N PARANTHESIS_CLOSE SEMICOLON

    COMMA  shift, and go to state 211

    $default  reduce using rule 65 (N)

    N  go to state 342


State 337

   17 postfix_expression: PARANTHESIS_OPEN type_name PARANTHESIS_CLOSE CURLY_BRACKET_OPEN initializer_list COMMA CURLY_BRACKET_CLOSE •

    $default  reduce using rule 17 (postfix_expression)


State 338

   63 conditional_expression: logical_OR_expression N QUESTION M expression N COLON • M conditional_expression

    $default  reduce using rule 64 (M)

    M  go to state 343


State 339

   80 expression: expression • COMMA assignment_expression
  194 iteration_statement: FOR PARANTHESIS_OPEN expression_statement M expression_statement N M expression • N PARANTHESIS_CLOSE M statement

    COMMA  shift, and go to state 211

    $default  reduce using rule 65 (N)

    N  go to state 344


State 340

  192 iteration_statement: WHILE M PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement •

    $default  reduce using rule 192 (iteration_statement)


State 341

  189 selection_statement: IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement N •
  190                    | IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement N • ELSE M statement N

    ELSE  shift, and go to state 345

    ELSE      [reduce using rule 189 (selection_statement)]
    $default  reduce using rule 189 (selection_statement)


State 342

  193 iteration_statement: DO M statement M WHILE PARANTHESIS_OPEN expression N • PARANTHESIS_CLOSE SEMICOLON

    PARANTHESIS_CLOSE  shift, and go to state 346


State 343

   63 conditional_expression: logical_OR_expression N QUESTION M expression N COLON M • conditional_expression

    SIZEOF            shift, and go to state 71
    PARANTHESIS_OPEN  shift, and go to state 78
    INCREMENT         shift, and go to state 80
    DECREMENT         shift, and go to state 81
    AMPERSAND         shift, and go to state 82
    ASTERISK          shift, and go to state 83
    PLUS              shift, and go to state 84
    MINUS             shift, and go to state 85
    TILDE             shift, and go to state 86
    EXCLAMATION       shift, and go to state 87
    IDENTIFIER        shift, and go to state 132
    CONSTANT_INT      shift, and go to state 90
    CONSTANT_FLOAT    shift, and go to state 91
    CONSTANT_CHAR     shift, and go to state 92
    LITERAL           shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 148
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 347


State 344

  194 iteration_statement: FOR PARANTHESIS_OPEN expression_statement M expression_statement N M expression N • PARANTHESIS_CLOSE M statement

    PARANTHESIS_CLOSE  shift, and go to state 348


State 345

  190 selection_statement: IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement N ELSE • M statement N

    $default  reduce using rule 64 (M)

    M  go to state 349


State 346

  193 iteration_statement: DO M statement M WHILE PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE • SEMICOLON

    SEMICOLON  shift, and go to state 350


State 347

   63 conditional_expression: logical_OR_expression N QUESTION M expression N COLON M conditional_expression •

    $default  reduce using rule 63 (conditional_expression)


State 348

  194 iteration_statement: FOR PARANTHESIS_OPEN expression_statement M expression_statement N M expression N PARANTHESIS_CLOSE • M statement

    $default  reduce using rule 64 (M)

    M  go to state 351


State 349

  190 selection_statement: IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement N ELSE M • statement N

    BREAK               shift, and go to state 66
    CASE                shift, and go to state 67
    FOR                 shift, and go to state 68
    WHILE               shift, and go to state 69
    GOTO_t              shift, and go to state 70
    SIZEOF              shift, and go to state 71
    CONTINUE            shift, and go to state 72
    IF                  shift, and go to state 73
    RETURN_t            shift, and go to state 74
    DEFAULT             shift, and go to state 75
    DO                  shift, and go to state 76
    SWITCH              shift, and go to state 77
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 50
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    SEMICOLON           shift, and go to state 88
    IDENTIFIER          shift, and go to state 89
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 352
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 350

  193 iteration_statement: DO M statement M WHILE PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE SEMICOLON •

    $default  reduce using rule 193 (iteration_statement)


State 351

  194 iteration_statement: FOR PARANTHESIS_OPEN expression_statement M expression_statement N M expression N PARANTHESIS_CLOSE M • statement

    BREAK               shift, and go to state 66
    CASE                shift, and go to state 67
    FOR                 shift, and go to state 68
    WHILE               shift, and go to state 69
    GOTO_t              shift, and go to state 70
    SIZEOF              shift, and go to state 71
    CONTINUE            shift, and go to state 72
    IF                  shift, and go to state 73
    RETURN_t            shift, and go to state 74
    DEFAULT             shift, and go to state 75
    DO                  shift, and go to state 76
    SWITCH              shift, and go to state 77
    PARANTHESIS_OPEN    shift, and go to state 78
    CURLY_BRACKET_OPEN  shift, and go to state 50
    INCREMENT           shift, and go to state 80
    DECREMENT           shift, and go to state 81
    AMPERSAND           shift, and go to state 82
    ASTERISK            shift, and go to state 83
    PLUS                shift, and go to state 84
    MINUS               shift, and go to state 85
    TILDE               shift, and go to state 86
    EXCLAMATION         shift, and go to state 87
    SEMICOLON           shift, and go to state 88
    IDENTIFIER          shift, and go to state 89
    CONSTANT_INT        shift, and go to state 90
    CONSTANT_FLOAT      shift, and go to state 91
    CONSTANT_CHAR       shift, and go to state 92
    LITERAL             shift, and go to state 93

    primary_expression         go to state 94
    constant                   go to state 95
    postfix_expression         go to state 96
    unary_expression           go to state 97
    unary_operator             go to state 98
    cast_expression            go to state 99
    multiplicative_expression  go to state 100
    additive_expression        go to state 101
    shift_expression           go to state 102
    relational_expression      go to state 103
    equality_expression        go to state 104
    AND_expression             go to state 105
    exclusive_OR_expression    go to state 106
    inclusive_OR_expression    go to state 107
    logical_AND_expression     go to state 108
    logical_OR_expression      go to state 109
    conditional_expression     go to state 110
    assignment_expression      go to state 111
    expression                 go to state 112
    statement                  go to state 353
    labeled_statement          go to state 115
    compound_statement         go to state 116
    expression_statement       go to state 119
    selection_statement        go to state 120
    iteration_statement        go to state 121
    jump_statement             go to state 122


State 352

  190 selection_statement: IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement N ELSE M statement • N

    $default  reduce using rule 65 (N)

    N  go to state 354


State 353

  194 iteration_statement: FOR PARANTHESIS_OPEN expression_statement M expression_statement N M expression N PARANTHESIS_CLOSE M statement •

    $default  reduce using rule 194 (iteration_statement)


State 354

  190 selection_statement: IF PARANTHESIS_OPEN expression N PARANTHESIS_CLOSE M statement N ELSE M statement N •

    $default  reduce using rule 190 (selection_statement)
